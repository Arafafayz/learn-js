بسم الله الرحمن الرحيم 
كورس الجافا اسكريبت  الزيرو 
(2752023)
-بعد الانتهاء من اول اربع حلقات مقدمه الكورس والاضافات والمطلوب قبل الدخول الى جافا اسكريبت 
 الحلقه الرابعه console
-الكونسول هو سيرفر مباشر للتطبيق يحتوى على جميع خصائص الجافا اسكريبت ويمكن من خلاله الكتابه والتعديل على جميع اكواد 
html .css
الحلقه الخامسه 
يتم اضافه ملف الجافا اسكريبت فى نهايه ملف html
body
    h1Page Titleh1
    
    script src=main.jsscript
body
html
او عن طريق كتابه داخل الفنكشن  
window.onload = function (){
    document.querySelector(h1).style.color =blue;
};

الافضل اضافه الكود فى نهايه الملف 

#006 - Comments And Bad Practice
 single line comment
 single line comment
 single line comment

multi
 line 
 comment
يستخدم الكومنت لتوضيح  كود معين او منعه من العمل لحين التأكد من صلاحيته ولا يجب وضعها بدون داعى 
#007 - Output To Screen
لاظهار رساله تحذير للمستخدم بأستخدام عنصر الالرت 

window.alert(Hello from js file);
لكتابه عنصر داخل الصفحه بأستخدام دوك.رايت
document.write(h1hellospanPage);
 والافضل كتابه العناصر بأستخدام الاليمنت 
document.createElement();
للكتابه داخل الكونسول بأستخدام لوج
 console.log(Hello Console);
#008 - Console Methods And Styling And
بعض خواص الكونسول
لأظهار رساله على هيئه ايرور
console.error(erorr);
لأظهار جدول فى صوره مصفوفه. 
console.table([osama,ahmed,arafa]);
للتحكم فى العناصر والونها وحجم الخط ...الخ 
console.log(Hellow from %cjs file,colorred; font-size 40px)
%c مع التأكد من كتابتها قبل العنصر المراد تحديده
الكونسول ليس خاص بلغه الجافا اسكريبت تبع ويب اى بى اى واجهه برمجيه خدميه  تستخدم للتعامل مع صفحات الويب منها الجافا اسكريبت 


#009 - What Is ECMAScript
اختصار ل ايكما استريك مسؤوله عن وضع المعايير للمعلومات ورقم 6 هوا الاصدار ويتم تحديثه دوريا 
جميع المتصفحات تدعم المعايير الجديده وفى حاله عدم الدعم يتم الترجمه الى الاصدار القديم عن طريق مواقع متخصصه 
var myname=osama;

console.log(Hello + myname); 
#010 - Data Types And Typeof Operator
انواع البيانات 
يتم وضع العلامه لكى يتم التعامل مع المكتوب ك نص وليس امر برمجى 
 نص برمجى او رساله 
 يكتب بين الدوبل كوتسstring
console.log(osama mohamed);
console.log(typeofosama mohamed);
الارقام   يكتب بدون دوبل كوتسnumber
console.log(typeof 5000);
console.log(typeof 5000.99);

array or object
مصفوفات 
console.log(typeof [10, 15, 17]);
console.log(typeof [aa, ss,as ]);
console.log(typeof {nameosama,age17, countryeg});

 

القيم المنطقيه Boolean
console.log(typeof true)
console.log(typeof false)
صح وخطا او نعم ولا
 غير معروف
Undefined
console.log(typeof undefined)
لايوجد او فارغ null
console.log(typeof null)
#011 - Variables Introduction
المتغيرات 
حاويه لها اسم وقيمه محدده يتم استخدمهافى اكثر من مكان لتغيير قيمته بسهوله 
طريقه كتابه المتغيرات 
Declear الاعلان عن متغير جديد
var user =10;الوسم واسم المتغير وقيمه المتغير 
var a =arafa;
console.log(user)
var ممكن مااكتبهاش عادى 
لو فى عنصر له اى دى معين اقدر احدده من الجافا اسكريبت واعدل عليه 
hello.innerHTML =option;
لازم تحدد قيمه المتغير قبل استخدامه 
#012 - Name Conventions And Identifiers
اسماء المتغيرات لا تبدء برقم كما فى اغلب لغات البرمجه 
اندر اسكور او الدولار ساين &- يتم البدء بيهم او فى اى مكان 
العلامات المميزه لاتوضع فى اسماء المتغيرات 
اسماء المتغيرات حساسه للكابيتال والاسمول للاحرف 
الكلمات المحجوزه فى بعض لغات البرمجه وانظمه التشغيل مثل 
Var if function
camleCase
اول الكلمه واخرها اسمول والوسط حرف كابيتال
#013 - Var, Let, Const Compare
var user =10; يسمح بتغيير القيمه مره اخرى بدون اظهار ايرور 
var user =10; يضاف الى الويندو اوبجيكت وبيعمل فيربل اسكوب دراما 

let b=2;لن يسمح بتغيير القيمه مره اخرى مع اظهار ايرور ورقم السطر
let b=2;لا يدخل فى اوبجيكت ويندو 

const a=1; ورقم السطر  لن يسمح بتغيير القيمه مره اخرى مع اظهار ايرور
const a=1; لا يدخل فى اوبجيكت ويندو

#014 - String Syntax And Character
طريقه كتابه النص داخل الجافا اسكريبت 
console.log(arafa'fayz');لتمييز او اظهار علامات التنصيص داخل النص 
console.log('arafafayz');
console.log('arafafayz');او استخدا الشرطه المائله  لاخبار الكومبيلر بأن العلامه التاليه ليست امر برمجى فيتم التعامل معاها وطباعتها كنص
console.log('arafafayz');لطباعه الباكسلاشنفسها

لمتابعه الكتابه فى سطر جديد بدون اغلاق السطر يتم وضع السلاش
console.log('arafa
fayz');

لطباعه كل كلمه فى سطر منفصل او بدء سطر جديد   n  
console.log( omarn arafan fayz);

#016 - Template Literals Template Strings
طريقه كتابه النصوص واظهارها 
let a=(we love);
let b=(js );
let c=(And );
let d=(programing );

console.log(a +  + b + n
 + c +  + d );
الطريقه القديمه بأستخدام المسافات 
الطريقه الجديده الخاصه الاكما بأستخدام الباك تك ّ
console.log(`${a} ${b} 
${c} ${d}`)


#017 - Variable And Concatenation


التحدى من اول مره عملته بفضل الله تعالى وكرمه 



let the_title=ElZero,the_Description=ElZero Web school,in_date=2510;

let Card=`
div class=card
h3 hello    ${the_title} h3
p ${the_Description}P
span${in_date}span
div
`
document.write(Card)
document.write(Card)
document.write(Card)
document.write(Card)


#018 - Arithmetic Operators
العمليات الحسابيه وعلامات الموجب والسالب المزدوجه 

console.log(10+ osama)
console.log(10-20)
console.log(10- osama)
console.log(typeof NaN)
console.log(1020)
console.log(10-20)
console.log(205)
console.log(203)
console.log(2  4)
console.log(2222)
console.log(10%2)
console.log(11%2)remove 1

++  increment post pre
-	  Decrement post pre
 


#019 - Unary Plus And Negation
العلامات الاحاديه والنفى 
+ تقوم بطباعه القيمه وتحويلها من نص الى رقم كما هوا لو موجب يطبع موجب واذا كان سالب يطبع سالب 
وعلامه السالب تقوم بتحويل الرقم الى رقم سالب اذا كان الرقم اصلا سالب يكون نفى النفى اثبات ويتحول الى موجب

console.log(+100)    
console.log(+100)
console.log(+-100)
console.log(+osama)
console.log(+10.5)
console.log(+null)
console.log(+false)
console.log(+true)

console.log(-100)
console.log(-100)
console.log(--100)
console.log(-osama)
console.log(-10.5)
console.log(-null)
console.log(-false)
console.log(-true)

console.log(Number (100))
#020 - Type Coercion
التحويل بالاكراه 

let a =10;                                          
let b =20;                                                             
let c =true; 
console.log(a+b);  

console.log(-2);
console.log(+);
console.log(false -true);
console.log(true-false );
console.log(true-false );
console.log( a + b + c);
console.log( +a + b + c);
1020
فى حاله عدم  وضع علامه + يتم طباعه الارقام بدون جمع كنص 
#021 - Assignment Operators
اختصار كتابه العلامات الحسابيه
let a =10;

a = a+20;

a+=10;
a+=100;
a=4;
console.log(a);

#023 - Number
-يمكن وضع اندر اسكور بين الاصفار داخل الرقم بدون تأثير عليه 
-حرف الاى بأنجلش يرمز الى عدد الاصفارجانب الرقم 
-علامه  تعنى الاس او القيمه الاسيه 
-يوجد قيمه نهائيه امنه فى الجافا اسكريبت للارقام 
console.log(1000000)
console.log(1_000_000);
console.log(1e6);
console.log(10  6);
console.log(1000000.00)
console.log(Number.MAX_SAFE_INTEGER);
console.log(Number.MAX_VALUE);
#024 - Number Methods
-الاجراءات الجاهزه 
 tostring
console.log((100).toString());        لتحويل عدد الى نص            
console.log(100..toString()); 
يحول الى نص مع تحديد عدد الارقام العشريه المطبوعه  tofixed
console.log(100.55555.toFixed(2));
parseint تحليل الرقم وبترجعه من نص الى رقم 
console.log(parseInt(100));
parsefloat تقوم بطباعه العدد مع الكسور 
console.log(parseFloat(100.550));         false
console.log(Number.isInteger(100 osama));  false
console.log(Number.isInteger(100.500));        false
console.log(Number.isInteger(100));        true
console.log(Number.isNaN(osama 100));    true
#025 - Math Object
العمليات الحسابيه 
  اذا كان الرقم اقل من 0.5 تحذفه ولو اكبر من او =5 تقوم بأضافته للرقم round
 console.log(Math.round(99.2)); =99
console.log(Math.round(99.5)); =100
floor تقوم بحذف الكسر مهما كان كبير
ceil تقوم بتقريب الكسر الى رقم صحيح مهما كان صغير 
console.log(Math.ceil(99.2)); =100
console.log(Math.floor(99.9)); =99
min , max 
بتقوم بطباعه اصغر رقم  وتقوم بطباعه اكبر رقم 
console.log(Math.min(99, 20, 50, 40, 100, 200,)); =20
console.log(Math.max(99, 20, 50, 40, 100, 200,)); =200
pow او الاس 
console.log(Math.pow(2,4)); =16
 يقوم بأظهار رقم عشوائى random
console.log(Math.random()); =56496846531
trunc يقوم بحذف جميع الكسور وطباعه الرقم الصحيح فقط 
console.log(Math.trunc(99.5));  =99
#026 - Number Challenge
let a =1_00;
let b =2_00.5;
let c =1e2;
let d =2.4;
console.log(Math.floor(a));=100
console.log(Math.floor(b));=200
console.log(Math.floor(c));=100
console.log(Math.floor(d));=2
console.log(Math.pow(a,Math.floor(d)) );=10000
جبت اصغر رقم من 200 واكبر رقم من 2.4 وقسمتهم على بعض مع تحديد عدد الكسور بالفكسيد
console.log((Math.floor(b)  Math.ceil(d) ).toFixed(2)); =66.67
نفس الكود ولكن تم اضافه بارسينت لتفعيل الرقم وليس نص
console.log(parseInt((Math.floor(b)  Math.ceil(d) ).toFixed(2)));
#027 - String Methods Part-1
العمليات على النصوص
1-طباعه حرف معين داخل النص ويسمى انديكس عن طريق استخدام او استخدام تشار ات او الاقواس 
let thename=”Ahmed”;

console.log(thename)     =Ahmed
console.log(thename[1]) =h
console.log(thename.charAt(a)) =h
لمعرفه عدد الحروف فى النص يتم استخدام اللينس وتعنى الطول length
console.log(thename.length) =5
وهى دائما تسبق الانديكس بواحد 
Trim()
تقوم بعمل حذف للمسافات قبل النص وبعده وتستخدم عند النسخ واللصق للباسورد او اى نص يحتوى على مسافات يراد حذفها على لا تؤثر على البنيه 
console.log(thename.trim()) Ahmed

toUpperCase()
toLowerCase()
لتحويل النص الى احرف كبيره او احرف اسمول
console.log(thename.toUpperCase());    AHMED
console.log(thename.toLowerCase());     ahmed 
استخدام السلاسل لاظهار رقم معين بتنسيق معين 
console.log(thename.trim().toUpperCase().charAt(2)); 
	
#028 - String Methods Part 2
Index of
للبحث عن قيمه معينه داخل النص وتحتوى على قيمه الاشىء المراد الوصول اليه وهى اجبارى ونقطه بدايه البحث وهى حساسه للاحرف الكابيتال والاسمول 
let a =Elzero Web School;
console.log(a.indexOf(Web))=7
console.log(a.indexOf(Web ,8))=1- 
الاول رقم الحرف سبعه والثانى رقم الحرف علشان بدءت من او ل رقم 8 قال مفيش 1-
Lastindexof
هيكتب ترتيب اخر رقم  زى بالظبط فى السليكتور لاست تشيلد بتحدد اخر عنصر فى الديف
let a =Elzero Web School;
console.log(a.indexOf(o))=5
console.log(a.lastIndexOf(o))=15

slice
يقطع جزء من النص من الامام(برقم موجب) او الخلف(برقم سالب )
واخر جزء لا يدخل مع النص 
console.log(a.slice(2, 6))= zero
console.log(a.slice(-5, -3))=ch
 repeat
تطبع  عدد مرات حسب الرقم المحدد
console.log(a.repeat(5));= Elzero Web SchoolElzero Web SchoolElzero Web SchoolElzero Web SchoolElzero Web School

 
splite
التقطيع  (تحويل النص الى مصفوفه)
يقوم بتقطيع النص كامل الى احرف اذا لم يتم ادخال القيمه 
console.log(a.split()); ['Elzero Web School']
console.log(a.split());(18) ['E', 'l', 'z', 'e', 'r', 'o', ' ', 'W', 'e', 'b', ' ', 'S', 
'c', 'h', 'o', 'o', '', 'l']
console.log(a.split(, 6));(6) ['E', 'l', 'z', 'e', 'r', 'o']

اذا تم ادخال  () يقوم بتقطيع النص كاملا كل حرف لوحده 
اذا تم ادخال السيمىكولن وتحديد رقم بعدها ينتهى فى التقطيع عند الرقم المعين 
#028 - String Methods Part 3
substring
تقوم بقطع النص مثل slice  وطباعته مع تحديد البدايه والنهايه 
اذا كانت النهايه اكبر من البدايه يقوم بالتبديل تلقائيا
لكن الفرق بينه وبين السلايس انه اذا تم ادخال رقم سالب يقوم بالبدء من الصفر وليس من النهايه 
وبأستخدام اللينس يمكن طباعه اخر رقم او الارقام من الخلف زى السليس او القطع 
console.log(a.substring(2)); =zero Web School
console.log(a.substring(2, 6)); = zero
console.log(a.substring(2, 6)); = zero
console.log(a.substring(-10)); = Elzero Web School
console.log(a.substring(a)); = Elzero Web School
console.log(a.substring(a. length -1) ); = Elzero Web School
console.log(a.substring(a. length-3, a.length-5) ); = ch
substr
يقوم بنفس عمل سباسترينج مع اختلاف بسيط عند تحديد البدايه والنهايه يتم كتابه عدد الحروف المراد طباعتها بعد النهايه 
console.log(a.substr(-5, 2)); =ch
includes
هل هذا النص يحتوى على الكلمه الموجوده ام لا والاجابه تكون ب ترو او فالس
let a =Elzero Web School;

console.log(a.includes(Web)); =true ويقبل البدايه والنهايه   
startsWith
هل الكلمه تبدء بحرف معين ام لا ويمكن تحديد البدايه والنهايه 
والاجابه صح او خطا 
let a =Elzero Web School;

console.log(a.startsWith(E)); =true نعم تبدء بحرف  اى  
console.log(a.startsWith(E, 2)); =false تم البحث بعد الرقم الثانى ولم يعثر عليها
endswiht
هل النص ينتهى بحرف معين ام لا مع امكانيه تحديد اللينس او طول الفقره المراد البحث بها 
let a =Elzero Web School;

console.log(a.endsWith(l)); =true
console.log(a.endsWith(E)); =false
#030 - String Challengs

let a =Elzero Web School;

console.log( (a.slice(-4, -3).toUpperCase().repeat(8)));
تم حل التحدى عن طريق تحديد حرف وطباعته وعمل تكرار8 مرات له 
let a =Elzero Web School;

console.log( a.split(,5)); 'E', 'l', 'z', 'e', 'r']
السؤال الثانى تم طباعه مصفوفه بها كلمه الزيرو
خلاصه القول ان يمكن تحديد اى حرف او قطعه بعينها من النص او البحث عنها داخل النص بأستخدام المتغيرات المتاحه 



#031 - Comparison Operators
عمليات وعلامات المقارنه 
==
Equal او اليساوى
console.log(10 == 10);true
console.log(-10 == -10);true
الاتنين نفس القيمه دى مقارنه القيمه فقط وليس نوع البيانات عن طريق استخدام == اتنين يساوى
console.log(10 != 10);false
console.log(-10 != -10); false
لكن فى حاله المقارنه بين القيمه ونوع البيانات نضع ===
3علامات يساوى وهنا هنقارن بين القيم ونوع البيانات 
console.log(10 === 10);false
console.log(-10 === -10);false
=
اكبر من واصغر من ويساوى
console.log(10   10);false
console.log(-10    10);false
console.log(-10 = 10);false
#032 - Logical Operators
طريقه النفى بأستخدام !
console.log(true);
console.log(!true);
console.log(10 == 10);=true
console.log(!(10 == 10));=false
علامه التعجب تعنى لا تساوى 
&&

علامه (و)&&
تعنى وجود شرطين يجب تنفيذهم او اكثر من شرط يجب تنفيذه واذا كان هناك شرط غير موجود مع توافر باقى الشروط لا يتم تنفيذ الامر او يظهر خطا
console.log(10 == 10 && 108 && 10 50);= false
console.log(10 == 10 && 108 && 10 50);= true
 
 علامه البايب لاين وتعنى او 
اذا توافر احد الشروط وليس جميعهم يتم تنفيذ الامر 
console.log(10 == 10  108  10 50);= true
console.log(10 == 10  108 && 10 50);= true
#033 - If Conditions
الجمله الشرطيه تتكون من شرط وفعل الشرط
If(condation){
Block of code};

let price =100;
let discount =false ;
let discountamount= 30;
let country =syrea;

if(discount === true){
    price -=discountamount
}
else if(country===egypt){
     price -=40;
}
else if(country===egypt){
     price -=90;
}
else{
    price-=10;
}
console.log(price);
مجموعه شروط اذا تحقق شرط منهم يتم كتابه جواب الشرط و اذا لم يتحقق اى شرط يتم كتابه الشرط الاخير الى هوا اخر الس
#034 - Nested If Condition
تداخل الشروط
if(discount === true){
    price -=discountamount
}
else if(country===egypt){
   if (student===true ){
    price-= discountamount +30 ;
   }
   else {
     price-= discountamount +10
   }
}
اكثر من شرط داخل شرط واحد
#035 - Conditional Ternary Operator.

عمليات الشرط الاثلاثى 
let thename =mona;
let theginder =female ;
let age= 30;
if(theginder === male){
    console.log(Mrs)
}
else {
  console.log(Mr)
}
theginder =female console.log(Mrs) console.log(Mr);
let result=theginder =female (Mrs) (Mr);
document.write(result);
console.log(` hello ${result} ${thename}`)
 تم اضافه الشرط وعمل سطر مختصر للشرط بأستخدام علامه الاستفهام 
ثم حذف كونسول لوج لطباعتهم فى متغير رييزلت
فى حاله الالس 
يتم عمل التنسيق بأستخدام علامات الاستفهام والكولن بهذه الطريقه 
age  20 
 console.log(20)
 age  20 && age  60 
 console.log(betwen 20-60)
age60
console.log(60)
console.log(undefind);
#036 - Nullish Coalescing Operator And
عند كتابه قيمه المتغير يتم الطباعه فى الكونسول كما تعلمنا
let price =100 ;
console.log(`the price is ${price}`)=100
ولكن عند عدم وجود قيمه للمتغير يتم طباعه undefined
let price ;
console.log(`the price is ${price}`)=undefind
لذلك يتم وضع علامه او بجانب قيمه المتغير فى امر الطباعه لكى اذا تغير السعر او حديث خطأ يتم طباعه السعر الاخر كما يلى 
let price =100 ;
console.log(`the price is ${price  200}`)=100
let price  ;
console.log(`the price is ${price  200}`)=200
let price =null ;
console.log(`the price is ${price  200}`)=200
اذا تم وضع علامه ؟؟ الاستفهام بدل  يتم طباعه القيمه 
let price =0 ;
console.log(`the price is ${price  200}`)=0
كيفيه معرفه هل البيانات صحيحه او خاطئه بستخدام البوليان
console.log(Boolean(100))=true
console.log(Boolean(-100))=true
console.log(Boolean(0))=false
console.log(Boolean())=false
console.log(Boolean(null))=false
#037 - If Condition Challenge
let a =5 ;

a  10 
 console.log(10)
a = 10 && a =40 
console.log(10to 40)
a  40  
console.log(40)
console.log(unknown);
السؤال الثانى 
تم عمل المطلوب عن طريق تايب اوف لكى تتساوى القيم 
let st = Elzero web school;
if (typeof(st)===typeof34)
{console.log(good)}
#038 - Switch Statement
let day=4;
switch(day){
  case 0
    console.log(satarday);
    break;
      case 1
    console.log(sunday);
    break;
      case 2
    console.log(monday);
    break;
      case 3
case 2
    console.log(“thuthday”);
    break;
      case 4
    console.log(“Friday”);
    break;
    default 
    console.log(“ ndefined”)
}
بيتم اختيار القيمه case  وعمل بريك بعدها للخروج من السويتش 
اذا لم تكتب بريك سوف يقوم بطباعه جميع الاحتمالات من بدايه التطابق مع كاس واذا لم يعثر على اى تطابق للقيم يتم كتابه الديفولت 
-اقدر اعمل اكثر من قيمه  للبحث عنها وعند التساوى مع اى قيمه يتم طباع الكود case
الديفولت مش شرط تكون فى الاخر عاد ىفى الاول او اى سطر 

#039 - Switch And If Condition Challenge

let jop =designer;
let salary =0;
switch(jop){
  case manager
    salary= 8000;
    console.log(salary);
    break;
  case it
  case support
    salary= 6000;
    console.log(salary);
    break;
     case developer
     case designer
    salary= 7000;
    console.log(salary);
    break;
     default 
    console.log(undefind)
}
تم حل السؤال الاول بأستخدام سويتش كيس وتغغير قيم السالارى

let holidays =0;
let money=0;

if(holidays===0){
  money=5000;
  console.log(`My money is ${money}`)
}
#040 - Array Big Introduction
مقدمه الى المصفوفات 
كيف تنشى ء مصفوفه 
let myfrinds =[arafa, dega, omar,];
وطريقه تحديد اى عنصر بأستخدام 
console.log(`Hello ${myfrinds[0]}`)=Hello arafa
console.log(`Hello ${myfrinds[2]}`)=Hello omar
تحديد حرف داخل عنصر من المصفوفه
console.log(`Hello ${myfrinds[2][2]}`)=a
طريقه عمل اراى داخل اراى اخرى وتحديد اى عنصر داخل المصفوفه الجديده 
let myfrinds =[arafa, dega, omar,[mama, baba]];

console.log(`Hello ${myfrinds[3][1][0]}`)
طريقه تحديد عنصر فى المصفوفه وتغييره عن طريق كتابه او تحديث رقم العنصر كما يتم تغيير المتغير 
let myfrinds =[arafa, dega, omar,[mama, baba]];

console.log(myfrinds); ['arafa', 'dega', 'omar', Array(2)]
myfrinds[0]=baba
console.log(myfrinds);  ['baba', 'dega', 'omar', Array(2)]

ويمكن تغيير العنصر داخل المصفوفه الى مصفوفه بها عدد من المتغيرات او العكس
معرفه هل نوع البيانات مصفوفه ام لا بطريقتين 

console.log(typeof myfrinds);=object
console.log(Array.isArray( myfrinds));=true
#041 - Using Length With Array
Lengthالطول يستخدم فى الاسترينج او النص لايجاد عدد العناصر او الاندكس
let a =arafa
console.log(a.length);=5
وفى المصفوفات يتم اظهار عدد العناصر داخل كل مصفوفه 
let myfrinds =[arafa, dega, omar,[mama, baba]];

console.log(myfrinds.length);=4

تغيير قيمه اى عنصر داخل المصفوفه عن طريق تحديد رقمه بأستخدام 
console.log(myfrinds); ['arafa', 'dega', 'omar', Array(2)]
myfrinds[0]=baba
console.log(myfrinds);  ['baba', 'dega', 'omar', Array(2)]
دائما يسبق الاندكس بواحد  بسبب ان طول المصفوفه بيدء من صفر لكن العدد بيكون من رقم 1length
let myfrinds =[arafa, dega, omar,mama];

console.log(myfrinds.length);
myfrinds[8]=dady
console.log(myfrinds.length);=
(10) ['arafa', 'dega', 'omar', 'mama', empty × 4, 'dady', 'asmaa']
اذا تم وضع رقم عنصر اكبر من عدد المصفوفه يتم اضافه العنصر فى الخانه قبل الاخيره وعمل مكان فارغ بعدد العناصر الجديد
و لاضافه  عنصرفى اخرالمصفوفه بطريقه برمجيه عن طريق كتابه اللينس او الطول 
let myfrinds =[arafa, dega, omar,mama];

myfrinds[myfrinds.length]=asmaa;

console.log(myfrinds);=asmaa
لكن اذا اردت تغيير العنصرالاخير دائما او تحديده بطريقه برمجيه يتم عن طريق طرح واحد من الطول
let myfrinds =[arafa, dega, omar];

myfrinds[myfrinds.length-1]=lion;=lion
اقدر احدد طول المصفوفه واعدله 
let myfrinds =[arafa, dega, omar];

myfrinds.length=2;=(2) ['arafa', 'dega']
#042 - Add And Remove From Array
اضافه وحذف العناصر من المصفوفات 
unshift
يقوم بأضافه العناصر او العناصر فى اول المصفوفه
let myfrinds =[arafa, mama, omar, dega, ammar ];
console.log(myfrinds);

myfrinds.unshift(dad);=(6) ['dad', 'arafa', 'mama', 'omar', 'dega', 'ammar']
shift
يقوم بحذف اول عنصر فى المصفوفه ويمكن وضعه فى متغير وطباعته
let myfrinds =[arafa, mama, omar, dega, ammar ];
console.log(myfrinds);= (5) ['arafa', 'mama', 'omar', 'dega', 'ammar']
myfrinds.shift();(4) ['mama', 'omar', 'dega', 'ammar']
 let first = myfrinds.shift();
console.log(`First name is ${first}`);= First name is arafa

push
يقوم بأضافه العنصر او العناصر فى اخر المصفوفه
let myfrinds =[arafa, mama, omar, dega, ammar ];
console.log(myfrinds);

myfrinds.push(dad);=['arafa', 'mama', 'omar', 'dega', 'ammar', 'dad']
pop
يقوم بحذف اخر  عنصر فى المصفوفه ويمكن وضعه فى متغير وطباعته

let myfrinds =[arafa, mama, omar, dega, ammar ];
console.log(myfrinds); (5) ['arafa', 'mama', 'omar', 'dega', 'ammar']
myfrinds.pop();(4) ['arafa', 'mama', 'omar', 'dega']
 let last =myfrinds.pop();
console.log(`last name is ${last}`);= last name is ammar
#043 - Searching Array
البحث داخل المصفوفات
Indexof()
يبحث عن العنصر المطلوب (يجب كتابه اسم العنصر ) وبدايه مكان البحث اختيارى 
let myfrinds =[arafa, mama, omar, dega, ammar,  arafa];

 console.log(myfrinds.indexOf(arafa))= 0
 console.log(myfrinds.indexOf(arafa,2))=5 تم وضع ترتيب البدء بعد العنصر التانى فظهر العنصر الاخير 
 last Indexof()
هيبدء البحث من الخلف للامام وهيظهر الرقم الطبيعى الخاص بالعنصر
 console.log(myfrinds.lastIndexOf(arafa))=5
 console.log(myfrinds.lastIndexOf(arafa,-2))=0

includes
يحتوى على العنصر ام لا
 console.log(myfrinds.includes(arafa))=true
اذا كان العنصر غير موجود فى المصفوفه يظهر فى الكونسول -1
ويمكن تنفيذ هذه النتيجه فى الجمله الشرطيه كما يلى 
if(myfrinds.indexOf(g)===-1){

console.log(undefind);=undefind
#044 - Sorting Arrays
ترتيب وفرز البيانات
Sort()
تقوم بفرز البيانات والحروف ترتيب ابجدى تصاعدى

let myfrinds =[ 10, arafa, mama, omar, 1000, 100, 20, 10, -20, -10];

console.log(myfrinds)
console.log(myfrinds.sort())
=(10) [-10, -20, 10, '10', 100, 1000, 20, 'arafa', 'mama', 'omar']
Reverse
تقوم بعكس الترتيب من النهايه للبدايه
let myfrinds =[ 10, arafa, mama, omar, 1000, 100, 20, 10, -20, -10];

console.log(myfrinds)
console.log(myfrinds.reverse())
=(10) [-10, -20, '10', 20, 100, 1000, 'omar', 'mama', 'arafa', 10]

اذا تم عمل سورت ثم ريفيرس يتم عكس المصفوفه بعد عمل السورت كما يلى 
console.log(myfrinds)
console.log(myfrinds.sort())= [-10, -20, 10, '10', 100, 1000, 20, 'arafa', 'mama', 'omar']

console.log(myfrinds.reverse())=['omar', 'mama', 'arafa', 20, 1000, 100, '10', 10, -20, -10]
يمكن استخدام الخاصيتين معا 
console.log(myfrinds.sort().reverse)
#045 - Slicing Array
تجزئه المصفوفات  slice
اذا لم تحدد البدايه والنهايه سوف يبدء من الصفر وينتهى فى اخر عنصر 
let myfrinds =[arafa, mama, omar, dega, ammar,  arafa];

console.log(myfrinds.slice())=(6) ['arafa', 'mama', 'omar', 'dega', 'ammar', 'arafa']

اذا تم تحديد البدايه والنهايه لا يأخذ اخر عنصر not uncluding end
let myfrinds =[arafa, mama, omar, dega, ammar,  arafa];

console.log(myfrinds.slice(1, 5))=(4) ['mama', 'omar', 'dega', 'ammar']
القيم السالبه تقوم بالعد من الخلف للامام لكن الطباعه تكون من الامام للخلف
let myfrinds =[arafa, mama, omar, dega, ammar,  arafa];

console.log(myfrinds.slice(-3))=(3) ['dega', 'ammar', 'arafa']
وتقبل القيمتين بالسالب 
اللسليلاس لا تغير من المصفوفه الرئيسيه
Splice
الجمع او الاضافه
يقبل بدايه ونهايه وعدد القيم المراد حذفها او دمجها كما يلى 
let myfrinds =[arafa, mama, omar, dega, ammar,  arafa];

myfrinds.splice(0, 0, ggggg, hhhhh);

console.log(myfrinds);=(8) ['ggggg', 'hhhhh', 'arafa', 'mama', 'omar', 
'dega', 'ammar', 'arafa']
 فى حاله الحذف يمكن تحديد رقم الاندكس المراد الحذف منه وعدد العناصر المراد حذفها او اضافتها 

let myfrinds =[arafa, mama, omar, dega, ammar,  arafa];

myfrinds.splice(0,2 , ggggg, hhhhh);

console.log(myfrinds);=(6) ['ggggg', 'hhhhh', 'omar', 'dega', 'ammar', 'arafa'] 
#046 - Joining Arrays
ضم المصفوفات
.concat
يمكن ضم مصفوفه او اكثر الى بعض عن طريق 
let myfrinds =[ mama,  arafa];
let mynewfrinds =[ omar,  dega];
let mybestfrinds =[ gedo,  ammar];

let allfrinds= myfrinds.concat(mybestfrinds, mynewfrinds);
console.log(allfrinds);=(6) ['mama', 'arafa', 'gedo', 'ammar', 'omar', 'dega']
ويمكن ايضا اضافه عناصر جديده داخل المصفوفه او مصفوفه كامله داخل المصفوفه 

let allfrinds= myfrinds.concat(mybestfrinds, mynewfrinds,55555, [hhhh,gggg]);
console.log(allfrinds);
=(9) ['mama', 'arafa', 'gedo', 'ammar', 'omar', 'dega', '55555', 'hhhh', 'gggg']
Join()
يقوم بدمج العناصر مع بعض وطباعتها فى صورة استرنج او نص مع وضع فاصله بينهم  اذا لم تقم بكتابه شىء بين الاقواس 
console.log(allfrinds.join());=mama,arafa,gedo,ammar,omar,dega,55555,hhhh,gggg

اما اذا وضعت علامات التنصيص()
فسوف يقوم بكتابه العناصر جميعا بدون فواصل
console.log(allfrinds.join());=mamaarafagedoammaromardega55555hhhhgggg
 اذا وضعت اى علامات (@$%&)
console.log(allfrinds.join( @ $ $ & ));
=mama @ $ $ & arafa @ $ $ & gedo @ $ $ & ammar @ $ $ & omar @ $ $ & dega @ $ $ & 55555 @ $ $ & hhhh @ $ $ & gggg
ويمكن اضافه اى متغير بعد العلامات مثل تحويلهم الى حروف كبيره
console.log(allfrinds.join( @ $ $ & ).toUpperCase());
=MAMA @ $ $ & ARAFA @ $ $ & GEDO @ $ $ & AMMAR @ $ $ & OMAR @ $ $ & DEGA @ 
#047 - Array Challenge
console.log(my.slice(0, 4).reverse())=(4) ['osama', 'elham', 'mazero', 'ahmed']
تم اخذ جزء بالسلايس وعمل ريفيرس 
console.log(my.slice(1, 3).reverse())=(2) ['elham', 'mazero']
تم اخذ جزء بالسلايس وعمل ريفيرس 
#048 - Loop - For And Concept Of Loop
حلقات التكرار 
تتكون من الفرض و الشرط وفعل الشرط و
جميع الشروط اختياريه
for (let i =0 ; i10 ;i++ ){
console.log(i)
}

#049 - Looping On Sequence
المصفوفات وحلقات التكرار
يمكن طباعه حلقات التكرار بأستخدام اللوب عن طريق تحديد طول المصفوفه كما يلى 
let myfrinds =[osama,ahmed, sayed, ali, amira]
for (let i = 0 ; i myfrinds.length  ; i++ ){
console.log(myfrinds[i])
}=osama
 ahmed
 sayed
 ali
 amira
كما يمكن فرز عناصر المصفوفات عن طريق عمل مصفوفه جديده وتنفيذ الشرط المطلوب بستخدام المصفوفات كما يلى 
let myfrinds =[osama, 2, 5, 8, ahmed, sayed, ali, amira, 1 , 2]
let onlynames=[]

for (i=0 ; imyfrinds.length ; i++)

if (typeof myfrinds[i]===string){
onlynames.push(myfrinds[i])
}
console.log(onlynames);=(5) ['osama', 'ahmed', 'sayed', 'ali', 'amira']



#050 - Nested Loops And Trainings
يمكن عمل مجموعه من الحلقات التكراريه داخل بعضها كما يلى 

let products=[keyboard,mouse, pen, pad, monitor];
let colors=[red, green, black]

let products=[keyboard,mouse, pen, pad, monitor];
let colors=[red, green, black]
let models=[ 2020, 2023]

for (  i=0 ; i  products.length ; i++){
    
    console.log(#.repeat(15))
    console.log(`# ${products[i]}`)
    console.log(#.repeat(15));
    
    for(j=0 ; jcolors.length; j++){
        console.log(`-${colors[j]}`);
    } console.log(#.repeat(15));
     for(k=0 ; k  models.length; k++){
        console.log(`-${models[k]}`);
    }
 console.log(#.repeat(15));
}

#051 - Loop Control - Break, Continue
Break
يقوم بالخروج من الحلقه عند تحقق الشرط كما يلى 
(ترتيب الكود مهم جدا جدا جدا )
يجب ان يكون امر الطباعه قبل الجمله الشرطيه 


let products=[keyboard,mouse, pen, pad, monitor];
let colors=[red, green, black]
let models=[ 2020, 2023]

for(i=0; iproducts.length;i++){
   
console.log(products[i])
if(products[i]===pen){
    break} }
Continue
تقوم بالبحث عن العناصر بأستخدام الشرط المحدد
ترتيب الكود مهم جدا جدا جدا 
يجب ان يكون امر الطباعه بعد الجمله الشرطيه 
let products=[keyboard, 5, 5, 5,mouse, pen, 2, 5, 8, 6, pad, monitor];
let colors=[red, green, black]
let models=[ 2020, 2023]

for(i=0; iproducts.length;i++){
   if(typeof products[i]===number){
    continue
}
console.log(products[i])
}
Label
هوا معرف لحلقات التكرار 
لتحديد اى حلقه من حلقات التكرار تريد تنفيذ شرط معين بها كما يلى 
let products=[keyboard,mouse, pen,  pad, monitor];
let colors=[red, green, black]
let models=[ 2020, 2023]

mainloop for(i=0; iproducts.length;i++){

   if(typeof products[i]===number){
    continue
}console.log(`${products[i]}`);
nestedloop

for(j=0; jcolors.length;j++){
    console.log(`-${colors[j]}`)
    if (colors[j]===green){
    break nestedloop ;}}}
#052 - Loop - For Advanced Example
امثله متقدمه
يمكن وضع قيمه للمتغير خارج اللوب 

let products=[keyboard,mouse, pen,  pad, monitor];
 let i =0;
 for ( i =0; i  products.length; i++){
    console.log(products[i]) }
يمكن حذف اى خطوه من داخل اللوب ولكن وضع السيمىكولن مكانها 
البدايه او الانطلاق والشرط والزياده 
كذلك يمكن طباعه اكثر من عنصر كل مره 
let products=[keyboard,mouse, pen,  pad, monitor];
 let i =0;

 for (;  ;){
    console.log(products[i])
     i++ ; i+=2
     if(i=== products.length){
        break
     }
 }
#053 - Practice - Add Products To Page
عمل مجموعه منتجات داخل الصفحه بأستخدام الجافا اسكريبت فقط 

let products=[keyboard,mouse, pen,  pad, monitor, iphone ];
let colors=[red, green, black]

let showCount =5;

document.write(`h1Show ${showCount} Products h1`)
document.write(`hr`)

for( i=0; ishowCount ;i++){
    document.write(`div`) 
    document.write(`h3[${i+1}] ${products[i]} h3`) 
    document.write(`div`) 
    for( j=0; jcolors.length ;j++){
          document.write(`p ..  ${colors[j]} .. p`) 
    } 
}

لعرض الالوان فى صف واحد نستخدم التداخل فى المصفوفات 

let products=[keyboard,mouse, pen,  pad, monitor, iphone ];
let colors=[red, green, black]

let showCount =3;

document.write(`h1Show ${showCount} Products h1`)
document.write(`hr`)

for( i=0; ishowCount ;i++){
    document.write(`div`) 
    document.write(`h3[${i+1}] ${products[i]} h3`) 
    document.write(`div`) 
    for( j=0; jcolors.length ;j++){
          document.write(`p   ${colors[j]}  p`) 
          
    }
      document.write(`p   ${colors.join(  )}  p`) 
       document.write(`hr`)
}
#054 - Loop – While
نفس مراحل الفور لكن بطريقه كتابه مختلفه 
مادام الشرط محقق يتم تنفيذ الامر وعند عدم التحقق يخرج بالبريك 

let products=[keyboard,mouse, pen,  pad, monitor, iphone ];

let index =0 ;
while (index  10){
    console.log(index);
    index ++=123456789
}
وممكن عمل شرط عادى داخل اللوب 

let products=[keyboard,mouse, pen,  pad, monitor, iphone ];

let index =0 ;
while (index  10){
    console.log(index);
    index ++=123456789
    if(index===3){
        break }}=012
طباعه المصفوفات بأستخدام الويل والمتغير 

let products=[keyboard,mouse, pen,  pad, monitor, iphone ];

let index =0 ;
while (index  products.length){
    console.log(products[index]);
    index ++}
  
#055 - Loop - Do While
الفرق بينهم ان الدو ويل تقوم بعمل الفعل المطلوب اولا ثم تدخل فى حلقه التكرار
do{ console.log(i);
    i++}=0
while(false){
}
console.log(i)=1
#056 - Loop – Challenge
let myAdmins=[arafa,asmaa, goda, stop,  mona, aya,  ];
let Employees=[ammar, mona, mama, mmna, khaled, amr, amer, khadega ]
let xadmin=myAdmins.indexOf(stop)  ;
let Employeesa=[]

document.write(`div  We Have ${xadmin} Admindiv hr`) 

for( i=0 ; i  xadmin ; i++ ){
          document.write(`div  h3    The  Admin ${i+1}   ${myAdmins[i]} div hr`);
     for(j=0 ;jEmployees.length; j++){
        document.write(`div${j+1}-   ${Employees[j]}  div`)
     }
     document.write(`div   hr`);
      }







#057 - Function Intro And Basic Usage
الوظائف- او المهام 
هى عباره عن بلوك كود
او drayبمعنى لا تكرر كتابه الكود 
Bilt in function
هى فانكشن جاهزه زى لوج

User function
او مهام المستخدم 
طريقه الكتابه 
نفس شروط كتابه المتغيرات تنطيف على الفنكشن من حيث عدم البدء برقم او المسافات والرموز
function sayHello(){
    document.write(` Hello Osama `)
}
sayHello();=Hello Osama 
الفنكش تقبل الباراميتر او معيار الفنكشن
Argument او متغير الفنكشن 
function sayHello(username){
    document.write(` Hello ${username} `)
}
sayHello(`arafa`);=Hello arafa
#058 - Function Advanced Examples
الفنكشن تقبل اكثر من متغير 
function sayHello(username, age){
console.log(` Hello ${username} Your is ${age}`)
}
sayHello(`arafa`,33);
sayHello(`sayed`,52);
sayHello(`Ali`,11);

وفى حاله عدم ادخال واحد منهم يظهر انديفيند
وممكن استخدام الجمل الشرطيه داخل الفنكشن كما يلى 
function sayHello(username, age){
    if(age  20 ){
        console.log(`This App is unsetable for you`)
    }else{
console.log(` Hello ${username} Your is ${age}`)
}}
sayHello(`arafa`,33);
sayHello(`sayed`,52);
sayHello(`Ali`,11);

لطباعه عدد السنوات بأستخدام اللوب 

function generatYears (start, end){
    for(i=start; i=end; i++){
        console.log(i)
    }
}
generatYears(1980,2021)
لكى يحذف سنه من السنوات 

function generatYears (start, end, exclude){
    for(i=start; i=end; i++){
        if(i===exclude){
            continue
        }
        console.log(i)
    }
}
generatYears(1980,2021,2000)
#059 - Function Return And Use Cases
return
تعمل على اخراج نتيجه من الفنكشن واستدعائهاعند الحاجه كما يلى 
function sayHello(username){
 return(` Hello ${username} `)
}
let result= ( sayHello(`arafa`))
console.log(result);= Hello arafa 
يمكن عمل جميع العمليات الحسابيه داخل الفنكشن 
function calc(num1, num2){
 return num1 +num2
}
let result= calc(10,20)
console.log(result +100);=130
عند عمل ريترن داخل الفنكشن يتم ايقاف جميع العمليات بعدها 
واظهار النتائج 
function generator(start, end){
    for(i= start ;i=end ; i++){
        console.log(i)
        if(i===15){
            return
        }
    }
}

generator(10, 20)= 10 11 12 13 14 15;
#060 - Function Default Parameters
القيم او الحدود الموجوده مسبقا فى الفنكشن 
البارميترات القيمه الغير موجوده يتم استبدالها تلقائيا ب undefind
فى حاله استبدالها يتم عمل ذلك بطريقتين الاولى بأستخدام الشرط
والطريقه الثانيه بأستخدام او  كما يلى 
function sayhello(username, age){
    if(age === undefined){
        age =unknown                           1
    }
    age= age  unknow                           2
return `Hello ${username} Your age is ${age}`
}
console.log(sayhello(arafa));=Hello arafa Your age is unknown
او الطريقه الجديده Ecma
function sayhello(username, age=unknow){
    
return `Hello ${username} Your age is ${age}`
}
console.log(sayhello());=Hello undefind Your age is unknown
#061 - Function Rest Parameters
عن طريق الريست باراميتر يمكن استقبال عدد غير محدد من الباراميترات وليس اتنين او تلاته كما فى المثال السابق للجمع كما يلى 
عن طريق استخدام باراميتر وقبله 3 نقاط(…)
function calc(...numbers){
        let result =0 ;
        for(i=0; inumbers.length; i++){
            result+=numbers[i]
           }
    return `the final is  ${result} `;
}
console.log(calc(10, 20, 30, 40, 50, 60,));=the final is  210 
#062 - Function Ultimate Practics
مثال متقدم لعمل مجموعه من الخصائص للمستخدم مع تحديد الديفولت تبعها 

function showinfo(us = un, ag=un, rt =0, show=Yes, ...sk){
document.write(`div`)
document.write(`h2 Welcome, ${us} h2 `);
document.write(`p Age, ${ag} p `);
document.write(`p Hour Rate, $ ${rt} p `);
if(show===Yes){
    if(sk.length 0){
    document.write(`p Skills  ${sk.join(  )} p `);}
    else{
        document.write(`p Skillsno skills p `);
    }
}else{
    document.write(`p Skillsno skills p `);
}
document.write(`div`)
}
showinfo(osama,38,20,Yes,html,css)
ادخال المهارات بأستخدام التكرار او اللوب

function showinfo(us = un, ag=un, rt =0, show=Yes, ...sk){
document.write(`div`)
document.write(`h2 Welcome, ${us} h2 `);
document.write(`p Age, ${ag} p `);
document.write(`p Hour Rate, $ ${rt} p `);
if(show===Yes){
    if(sk.length 0){
        for(i=0; i sk.length;i++){
    document.write(`p Skills  ${sk[i]} p `);}}
    else{
        document.write(`p Skillsno skills p `);
    }
}else{
    document.write(`p Skillsno skills p `);
}
document.write(`div`)
}
showinfo(osama,38,20,Yes,html,css)
#063 - Random Arguments Function
تحدى الفنكشن 
محتاج وقت وتفكير وتركيز كبير
#064 - Anonymous Function And Practicse
الفنكشن مجهوله الهويه 
الترتيب مش ضرورى فى استخدام الفنكشن 
function calc(num1, num2){
return num1 +num2;}
console.log(calc(1, 2))
console.log(calc(1, 2))
function calc(num1, num2){
return num1 +num2;}
الاتنين نفس النتيجه 
يمكن تخزين الفنكشن داخل متغير
لكن بشرط  عدم استخدام الفنكشن داخل المتغير قبل الديكلاريشن 

let caculater =function calc(num1, num2){
return num1 +num2;}

console.log(caculater(10,20))
امتى نستخدم فنكشن بدون اسم او انونيمس فنكشن
فى حاله وجود وظيفه معينه لموضه معين فقط
#065 - Return Nested Function
طريقه تداخل الفنكشن 
function sayMessage (fname, lname){
let message =`Hello`;
function concatmsg(){
   return`${message} ${fname} ${lname}`}
   
return concatmsg();
}
console.log( sayMessage(osama, mohamed))=Hello osama mohamed
#066 - Arrow Function Syntx
الفنكشن الخطيه او الارو لا يوجد بها باراميتر او لا يمرر لها متغيرات 
فنكشن لطباعه رقم 10 عاديه او regular
function print(){
    return 10;
}
console.log(print())=10
وممكن وضعها داخل متغير مع حذف الاسم  كما يلى 
 let print= function (){
    return 10;
}
console.log(print())


استخدام الارو فنكشن 
 let print=  ()={
    return 10;
}
console.log(print())=10
وممكن حذف الريترن فى حاله ما اذا كان هناك خطوه واحده داخل الفنكشن 
 let print=  ()=10;

console.log(print())=10
فى حاله وجود باراميتر يتم كتابته كما يلى 
 let print1=  (num)= num;

console.log(print1(100))=10
وممكن حذف الاقواس فى حاله وجود متغير واحد 
 let print1=  num= num;
console.log(print1(100))=100
فنكشن ريجولار بها متغيرين 
 let print= function (num1, num2){
    return num1 + num2 ;
}
console.log(print(10,20))=30
تم تحويلها الى اروو 
let print=  (num1, num2)= num1 + num2 ;

console.log(print(10,20))=50
#067 - Scope - Global And Local
النطاق –المحلى والعام
العام
var a =1;
let b =2;

function showtext(){
console.log(` function -from global${a}`)1
console.log(` function -from global${b}`)2
}
console.log(`from global${a}`)
console.log(`from global${b}`)
showtext()
نطاق عام بسبب ان المتغيرات ضمن النطاق العام 
النطاق المحلى 
function showtext(){
 var a =10;
let b =20;
console.log(` function -from global${a}`)10
console.log(` function -from global${b}`)20
}
console.log(`from global${a}`)
console.log(`from global${b}`)
showtext()
 نطاق محلى داخل الفنكشن تنطبق عليه شروط الفنكشن فقط
اذا كان هناك متغيرات داخل الفنكشن يتم اخذ القيم منها اولا ولا تلتفت الى القيم الخارجيه اما اذا لم توجد متغيرات فى الداخل يبحث فى الخارج 
اما اذا كان هناك مجموعه من الفنكشن فكل فنكشن تختص بمتغيراتها ولا تتداخل المتغيرات فيما بينها اطلاقا
function showtext(){
    var a =10;
let b =20;
console.log(` function -from global${a}`)10
console.log(` function -from global${b}`)20
}
showtext()

function tt(){
var a=5;
let b =15
console.log(` function -from global${a}`)5
console.log(` function -from global${b}`)15
}
tt()



#068 - Scope – Block
حاجز النطاق 
Var 
فى حاله وضع المتغير بهذه الصيغه var
يتم التعامل مع المتغير المحلى كمتغير خارجى 

var x =10 ;
if(10===10){
    var x=50;
}
console.log(x);=50
 لكن let & const لا يفعل ذلك   
مثال
let x =10 ;
if(10===10){
    let x=50;
    console.log(` from local ${x}`);=50
}
console.log(` from global ${x}`);=10
#069 - Scope - Lexical (Static(
الفنكشن الابن تتعامل مع المتغيرات فى الفنكشن الاب والعكس غير صحيح 
function parent(){
    let a =10 ;
    function child(){
    console.log(a)
}
child();
}
parent()=10 تم طباعه الرقم 10 بسبب وجوده فى الفنكشن الاب والابن داخل الاب     
فى حاله وجود متغير داخل الابن هيطبعه الاول
function parent(){
    let a =10 ;
    function child(){
        let a =20 ;
        console.log(a)20== 
}
child();
}
parent()

تم طباعه 20 علشان دى الموجوده لوكل داخل الابن لو مش موجوده هنطبع 10 بتاعه الاب لو الاتنين مش موجودين هنطبع الجديده رقم 30
let a =30 ;
function parent(){
        function child(){
        console.log(a) 
}
child();
}
parent()=30 ومش عاوز اطول عليك واقولك ان المتغير فى الابن الاب مش هيقدر يطبعه ولا يشوفه    
#070 - Arrow Function Challenge
التحدى تم حل الجزء الاول بأستخدام البارميتر المتعدد كما يلى 
let names= function (...name){
  return`My Team  ${name} = Done ! `
  }
console.log(names([osama], [mohamed], [ali], [a], [ibrahem]))
My Team  [osama],[mohamed],[ali],[ibrahem] = Done !

تحويلها الى ارووفنكشن بفضل الله 
let names=  (...name) =`My Team  ${name} = Done ! `
  
console.log(names([osama], [mohamed], [ali],  [ibrahem]))
My Team  [osama],[mohamed],[ali],[ibrahem] = Done !

#071 - Higher Order Functions – Map
الفنكشن العاديه تقبل باراميتر داخلها 
لكن الهاير اوردر تقبل فنكشن كامله داخلها وممكن ترجع فنكشن 
Map
اراى ميسود
يعنى بتنشأ اراى  جديده 
الطريقه السابقه لعمل اراى جديده كانت تتم بأستخدام اللوب كما يلى 
let mynums =[1, 2, 3, 4, 5, 6];
let newarray=[];
for(i=0 ; i mynums.length ; i++){
  newarray.push(mynums[i]+mynums[i])
}
console.log(newarray)=(6) [2, 4, 6, 8, 10, 12]
طريقه map

عن طريق عمل اراى جديده ووضع  كلمه ماب بجوار الاارى المراد تحديثها  ثم ادخال الفنكشن واعطائها قيمه العنصر واسترجاع العمليه المطلوبه منها كما يلى 
let add =mynums.map(function(el){
  return el+el;
})
console.log(add);=(6) [2, 4, 6, 8, 10, 12]
طبعا الماب بتقبل 3قيم العنصر والاندكس والاراى
=  تحويلها الى ارو فانكشن 
let add =mynums.map((el, )= el+el)

console.log(add);=(6) [2, 4, 6, 8, 10, 12]
 بنفس النتيجه بفضل الله 
فى حاله وجود فنكشن منفصله تعمل على جمع الرقمين مع بعض او اى عمليه حسابيه اخرى ممكن دمجهم معا كما يلى 
function ad(el){
  return el+el
}

let add = mynums.map(ad)
console.log(add)
وبكدا استخدمنا فنكشن داخل الماب والحمد لله 
#072 - Higher Order Functions – Map
حل المشكله الاولى بأستخدام الماب المطلوب تحويل الحروف الاسمول الى كبيره والعكس 
1-تم عمل اسبليت لتقطيع الكلمه الى مصفوفه ثم استخدام الماب لعمل المصفوفه الجديده بأستخدام الجمله الشرطه المتعدده وعمل الجوين لادخال الحروف مره اخرى الى المصفوفه  وعمل جوين فى النهايه لادخالهم مره اخرى كاسترنج كما يلى 
let swapingcases=elZERo;
let sw =swapingcases.split().map(function(ele){
  return ele=== ele.toUpperCase()  ele.toLowerCase()  ele.toUpperCase();
})
.join()
console.log(sw)=ELzerO
المشكله الثانيه وهى تحويل الارقام الموجبه الى سالبه والعكس 
نقوم بوضع سالب قبل العنصر فقط العنصر الموجب يتحول الى سالب والعنصر السالب عند النفى يتحول الى موجب
let invertednumpers=[1, -10, -20, 15, 100, -30];

let inv=invertednumpers.map(function(ele){
  return -ele
})
console.log(inv)=[-1, 10, 20, -15, -100, 30]
المشكله الثالثه
حذف الارقام من داخل الاسترنج وطباعتها 
عن طريق تحويل الاسترنج الى مصفوفه اولا عن طريق الاسبليت ثم عمل ماب وفنكشن واستخدام الشرط بوجود معادله الاختبار الخاصه بالارقام والحروف 
let ignoreBooleans= Elz123er4o;
let ign=ignoreBooleans.split().map(function(ele){
  return isNaN(parseInt(ele))  ele  ;
})
.join();

console.log(ign);=Elzero
وتم تحويلها الى ارو فنكشن بسهوله بفضل الله 
#073 - Higher Order Functions – Filter
الفلتر نفس طريقه كتابه الماب لكن الفلتر يقوم بعمل فلتره بحيث يقوم ببناء مصفوفه جديده تماما بها العناصر التى ينطبق عليها الشرط

let numbers=[11, 20, 2, 5, 17, 10];
let newnum=numbers.filter(function(ele){
    return  ele % 2!==0 ;
})
console.log(newnum)=(3) [11, 5, 17]
مصفوفه لفلتره الاسماء التى تبدء بحرف معين 
let frinds =[Ahmed, samah, sayed, Asmaa, Amgad, Israa, ]
let New = frinds.filter(function(ele){
    return ele.startsWith(A)( true false;) 
})
console.log(New); =['Ahmed', 'Asmaa', 'Amgad']
#074 - Higher Order Functions – Filter
 فلتره الكلمات ذات الحروف الكبيره
let sentence = I Love Foood Code Too Playing Much;
let SmallWord = sentence.split( ).filter(function(ele){
    return ele.length =4 ;
})
.join( )
console.log(SmallWord)=I Love Code Too Much
فلتره الحروف من الارقام 
let ignoreNumbers =Elz123ero40
let ign=ignoreNumbers.split().filter(function(ele){
  return isNaN(parseInt(ele)) ;
})
.join();

console.log(ign)=Elzero
مثال فصل الارقام من الحروف وضربهم بأستخدام الفلتر والماب
let mix =A13BS2Zx;
let Newn=mix.split().filter(function(ele){
  return !isNaN(parseInt(ele)) ;
})
.map(function(ele){
    return eleele ;
})
.join()
console.log(Newn)=194
#075 - Higher Order Functions – Reduce
معناها يقلل وهى تعمل على تقليل النتيجه الى اقل حد حت 
let nums =[10, 20, 15, 30]
let add =nums.reduce(function(acc,current,index,arr){
  console.log(`Acc=${acc}`)
  console.log(`Acrrent element=${current}`)
  console.log(`Acrrent element index=${index}`)
  console.log(`array=${arr}`)
  console.log(`$############$`)
  return acc +current
})
console.log(add)=75
inetial Value
هى القيمه التى يمكن اضافتها كبدايه للعمليه 
#076 - Higher Order Functions – Reduce
مثال على اختيار اكبر كلمه داخل المصفوفه بأٍستخدام الريديوس
let theBiggest =[Bla, propganda, other, AAA, Battery, TEst, propganda_two,];

let check =theBiggest.reduce(function(acc,current){
  console.log(`Acc=${acc}`)
  console.log(`Acrrent element=${current}`)
  console.log( acc.length  current.length acc current)
  console.log(`$############$`)
  return acc.length  current.length acc current;
})
console.log(check)= propganda_two

المشكله الثانيه فصل العلامات عن الحروف ودمجها بأستخدام الريديوس بدلا من الجوين 
let removechars =[E, @, @, L, Z,  @,@,E, R,@,o,];

let New=removechars.filter(function(ele){
  return !ele.startsWith(@);
})
.reduce(function(acc,current){
  return`${acc}${current}`
})
console.log(New)= ELZERo
#077 - Higher Order Functions – ForEach
لاتنشأمصفوفه جديده لذلك يفضل استخدمها فى حاله عدم تغيير اى شىء فى المصفوفه لكن يتم استخدمها فى اضافه شىء معين الى العناصر 
let allis =document.querySelectorAll(ul li);

allis.forEach(function(ele){
  ele.onclick =function(){
allis.forEach(function(ele){
  ele.classList.remove(active)
})
    this.classList.add(active);
  }
})
لعمل كلاس اكتيف للعناصر او حذفه عند الضغط عليها 
- Higher Order Functions – Challenge
بفضل الله تم حل العمليه كامله
let mystring =1,2,3,EE,l,z,e,r,o,_W,e,b,_S,c,ho,o,l,2,0,Z;

let solution =mystring.split().map(function(ele){
 return isNaN(parseInt(ele))  ele  ;
})
.filter(function(ele){
  return ele===,   ele ; 
})
.filter(function(ele){
  return ele===_   ele ; 
})
solution.pop();
solution.shift()

let finalsolution=solution.reduce(function(acc,current){
  return`${acc}${current}`;
})
console.log(finalsolution);=ElzeroWebSchool
#079 - Object – Introduction
الكائن 
له معلومات اوخصائص ووظائف
propertes & method
let user ={
properties
thename osama,
theage 38,
methods
sayhellofunction(){
  return `hello`;
}
};
console.log(user.thename); osama
console.log(user.theage); 38
console.log(user.sayhello());hello
#080 - Dot Notation vs Bracket Notation
رمز النقطه ورمز الاقواس وطريقه كتابتهم فى الكائنات او الاوبجيكت
Propertyname اسم الخاصيه 
اذا كانت الخاصيه مكتوبه بين قوسين يتم اختيارها داخل الكائن عن طريق عمل الاقواس وبداخلها الدوبلكوتشين كما يلى 

let user ={
name osama,
country name  egypt,}
console.log(user.name)  =osama
console.log(user[country name])=egypt
فى حاله وجود متغير خارج الاوبجيكت نريد استخدامه يتم كتابه اسم المتغير داخل الاقواس كما يلى 
let myvar=country

let user ={
name osama,
country  egypt,}
console.log(user.name)  =osama
console.log(user.myvar)=undefind
console.log(user[myvar])=Egypt    
#081 - Nested Object And Advanced
تداخل الاوبجيكت 

let user ={

name osama,
age  38,
skills[Html, css, js],
available false,
adresses {
  ksariyadh,
  egypt{
    onecairo,
    twoGiza
  }
},
checkavfunction(){
  if(user.available === true){
    return `free for work`
  }else{
    return`not free`
  }
}
};
console.log(user.name);=osama
console.log(user.age);=38
console.log(user.skills);=(3) ['Html', 'css', 'js']
console.log(user.skills.join());=Htmlcssjs
console.log(user.skills[2]);=js
console.log(user.adresses.ksa);=riyadh
console.log(user.adresses.egypt.one);=cairo
console.log(user[adresses][egypt][one]);=cairo
console.log(user.checkav());=not free
فى حاله وجود مصفوفه داخل الاوبجيكت يمكن تطبيق جميع عمليات المصفوفات عليها جوين وماب وفلتر ولينس
لتحديد خاصيه داخل الاوبجيكت وتمييزها عن اى خاصيه خارجيه بنفس الاسم يتم كتابه اسم الاوبجيكت ثم اسم الخاصيه 

#082 - Create Object With New Keyword
طريقه انشاء اوبجيكت عن طريق عمل اوبجيكت فارغ ثم اضافه العناصر بداخله بأستخدام كريقه الدوت نوتيش اوبراكيت نوتيشن
let user ={};

user.age = 38; طريقه الدوتنوتيشن                          
user[country]=egypt                 طريقه البراكيت نوتيشن    

console.log(user)= {age 38, country 'egypt'}
ممكن اطبع عنصر واحد من الاوبجيكت عن تحديد اسمه او اطبع الاوبجيكت كامل عن طريق كتابه اسم الاوبجيكت
اضافه ميسود جديده 
let user ={                         عمل اوبجيكت جديد 
age  30
};
console.log(user)

user.age = 38; اضافه   خصائص جديده بأستخدام دوت نوتيشن 
user[country]=egypt اضافه   خصائص جديده بأستخدام براكت  نوتيشن 
console.log(user)
user.sayhello = function(){      اضافه  ميسود او عمليه جديده داخل الاوبجيكت  عن طريق تحديد اسمه ثم كتابه العمليه  ا                
  return `hello`;
}
console.log(user.age)=38
console.log(user[country])=egypt
console.log(user.sayhello())=hello
طريقه اخرى طريقه نيو كيور 
عن طريق كتابه نيو اوبجيكت كما يلى 
let user = new Object({});
ثم اضافه باقى العناصر كما فى المثال السابق عن طريق استخدام الكونستركتور الخاص بالاوبجيكت 
#083 - Keyword
This
معناها هذا
وتستخدم حسب موقعها او المراد منها داخل العمليه

console.log(this);=window
console.log(this===window);=true

myvar =100;
console.log(window.myvar)=100
console.log(this.myvar)=100
function sayhello (){
  console.log(this);
  return this;
}
sayhello()
console.log(sayhello()===window);=true
مثال عملى لاستخدامها 
document.getElementById(cl).onclick =function(){
  console.log(this)
}
تحديد خاصيه معينه لزرار معين او فعل معين تحديدا 
اوبجيكت يحسب العمر بالايام 
let user = {
  age 34,
  ageindays  function(){
    return user.age365        =  return this.age365
  }
}
console.log(user.age)
console.log(user.ageindays())
استخدام (هيعطى نفس النتيجه لانها تعود الى الاوبجيكت المكتوب بداخله الفنكشن )
 
للتأكد قم بطباعه الزيس داخل الاوبجيكت هيطبعالك الاوبجيكت نفسه
this داخل العمليه 

#084 - Create Object With Create Method
عمل اوبجيكت جديد بأستخدام Create Object
let user = {
  age 20,
  doubleage  function(){
    return user.age2
  },
};
console.log(user)
console.log(user.age)=20
console.log(user.doubleage())=40

let obj  = Object.create({});

obj.a=100;

console.log(obj);

let copyObj = Object.create(user)

console.log(copyObj)
console.log(copyObj.age)=20
console.log(copyObj.doubleage())20
يتم عمل الاوبجيكت الجديد ووضع الاوبجيكت القديم يسمى بروتوتيب كمتغير داخل الاوبجيكت الجديد وبناء عليه يتم اخذ قيم الاوبجيكت الجديد كبارميتر 
-فى حاله تحديث القيم داخل الاوبجيكت يتم تحديث القيمه داخل الاوبجيكت القديم وليس الجديد ويتم حل هذه المشكله عن طريق 
كتابه this داخل الاوبجيكت القديم كما يلى 
let user = {
  age 20,
  doubleage  function(){
    return this.age2 تم كتابه زيس بدلا من اسم الاوبجيكت لكى يتم تحديث القيم من الاوبجيكت الجديد
  },
};
console.log(user)
console.log(user.age)=20
console.log(user.doubleage())=40

let obj  = Object.create({});

obj.a=100;

console.log(obj);

let copyObj = Object.create(user)

copyObj.age=50                                                                         تحديث القيم بأستخدام الاوبجيكت الجديد  وضع                  

console.log(copyObj)
console.log(copyObj.age)=50
console.log(copyObj.doubleage())100

#085 - Create Object With Assign Method
طريقه الاسين تعمل على تعيين اكثر من مصدر او اوبجيكت داخل الاوبجيكت الجديد
let obj1={
  prop11,
  meth1function(){
    return this.prop1
  },
};
let obj2={
  prop21,
  meth2function(){
    return this.prop2
  },
};
let targetobject ={
prop11,
prop33,
}
let finalobject =Object.assign(targetobject,obj1)اضافه مصدرين للاوبجيكت
console.log(finalobject)=pprop11,prop33,
عند وجود اكثر من بروبرتى بنفس الاسم هياخد قيمه اول خاصيه تقابله 
-يمكن اضافه خواص جديده داخل الاوبجيكت وتعديل الخواض القديمه كما سبق شرحه 
-يمكن عمل اسين اوبجيكت فارغ واضافه الخواص داخله مباشره كما يلى 
let newopj =Object.assign({},obj1,{prop55,prop66})
console.log(newopj)=prop11- prop55 -  prop66

#086 - What Is DOM And Select Elements
Dom
تعنى
Document object model
طرق تحديد العناصر بأستخدام الجافااسكريبت 
1-عن طريق اسم Id يوجد واحد فقط لكل عنصر فى الصفحه 
let myIdElement= document.getElementById(my-div);
console.log(myIdElement);
وممكن تعمله فى متغير عادى وتستخدمه بسهوله فى اى مكان 
2-بأستخدام اسم التاج او الخاصيه وبيحدد كل العناصر بنفس التاج
let mytagElement= document.getElementsByTagName(p)
console.log(mytagElement); هيظر كل  البراجرافات الموجوده فى الصفحه
ويمكن تحديد واحد منهم عن طريق كتابه رقم الاندكس داخل كما يلى 
let mytagElement= document.getElementsByTagName(p)
console.log(mytagElement[0]);or
console.log(mytagElement[1]);
3-بأستخدام اسم الكلاس واذا موجود اكثر من عنصر بنفس الكلاس يتم تحديد العنصر المطلوب بأستخدام الاندكس كما يلى 
let myclassnameElement= document.getElementsByClassName(my-span)
console.log(myclassnameElement);
console.log(myclassnameElement[0]);
4- queryselector الاستعلام 
الكويرى سليكتور تقبل منك جميع القيم سواء كانت تاج او اى دى او كلاس كما انها تقوم بأظهار اول عنصر ينطبق عليه نفس الاسم فى حاله اختيار جميع العناصر نقوم بأستخدام quaryselectorall
let myQuryElement= document.querySelector(my-span)
console.log(myQuryElement);

let myallQuryElement= document.querySelector(my-span)
console.log(myQuryElement);
عند تحديد العنصر بأستخدام   id يتم كتابه علامه # قبل الاسم 
let myQuryElement= document.querySelector(#my-div)
console.log(myQuryElement);
كذلك اضافه الدوت او النقطه قبل الاسم فى حاله الاسبان 
فى حاله اختيار جميع العناصر نقوم بأستخدام quaryselectorall
let myallQuryElement= document.querySelectorAll(.my-span)
console.log(myallQuryElement);
-يوجد عناوين جاهزه داخل الصفحه -
console.log(document.title)
console.log(document.body)
console.log(document.forms[0].one.value)
console.log(document.links[1].href)
يمكن اختيارهم وتحديد اى عنصر بداخلهم وتغييره او عمل اى شىء به
#087 - Get Set Elements Content And
طريقه تغيير محتوى العناصر 
 span 
&lt;span&gt;
طريقه كتابه الاسبان بأستخدام الاقواس فى html
Get 
-يتم تحديد المحتوى بطريقتين طريقه طباعه المحتوى كامل واظهار التاج الخاص بلغه هتمل innerHtml
اوعن طريق طباعه النص فقط الموجود داخل التاج textcontent
let myelement =document.querySelector(.js)

console.log(myelement.innerHTML)=JavaScript spanDivspan &lt;span&gt;
console.log(myelement.textContent)=JavaScript Div span
set
طريقه اضافه عناصر داخل الصفحه 
myelement.innerHTML=text from spanmain.jsspan file اضافه عنصر بالتاج الخاص به داخل الصفحه 
myelement.textContent=text from spanmain.jsspan file تغيير نص داخل التاج فقط       



تغيير جميع خصائص العناصر 
document.images[0].src=httpsgoogle.com
document.images[0].alt=Alternate
document.images[0].title=Picture
document.images[0].id=Picture
document.images[0].className=img
ويمكن تغيير كل هذه العناصر على اللينكات والفورمس ..الخ
Get attribute
طريقه اضافه  او استدعاء الاتربيوت 
let mylink =document.querySelector(.link)

console.log(mylink.getAttribute(class))=link
console.log(mylink.getAttribute(href))=#
 Sit attribute
بيطلب قيمتين الاولى الاسم والثانيه القيمه 
let mylink =document.querySelector(.link)
mylink.setAttribute(href,httbsfacebook.com)
#088 - Check Attributes And Examples
Element attrebutes
للحصول على جميع الاتربيوت فى العنصر نكتب 
console.log(document.getElementsByTagName(p)[0].attributes)
Element Hasattrebute
تقوم بالبحث عن الاتربيوت داخل الاليمنت 
let myp =document.getElementsByTagName(p)[0]

if(myp.hasAttribute(data-src)){
    console.log(found);
}else {
            console.log( Not found);
        }
Element .remove attrebute
يمكن ازاله الاتربيوت عن طريقه كما يلى 
let myp =document.getElementsByTagName(p)[0]

if(myp.hasAttribute(data-src)){
    myp.removeAttribute(data-src)
}else {
            console.log( Not found);}
مثال جمع has ,remove,get
let myp =document.getElementsByTagName(p)[0]

if(myp.hasAttribute(data-src)){
    if(myp.getAttribute(data-src) ===){
myp.removeAttribute(data-src)
    }else{
        myp.setAttribute(data-src, New Value)
    }
    }else {
            console.log( Not found);}
Element Hasattrebutes
فى هذه الحاله يتم فحص العنصر هل يوجد به اتربيوت من الاساس ام لا
    if(myp.hasAttributes()){
                console.log(`Has Attrebuets`)=Has Attrebuets
            }
   if(document.getElementsByTagName(div)[0].hasAttributes()){
                console.log(`Has Attrebuets`)
            }else{
                console.log(`Div Has now attrebut`)=Div Has now attrebut
            }
#089 - Create And Append Elements
اهم فيديو فى لغه الجافا اسكريبت وعند الانتهاء منه المفروض تكون قادر على انشاء صفحه كامله من الصفر 
Create Element
طريقه انشاء عنصر
 let myElement = document.createElement(div);انشاء ديف جديد داخل متغير                                                
let myattr = document.createAttribute(data-custom)     انشاء اتربيوت جديد داخل متغير                                  
let mytext = document.createTextNode(Product One);انشاء نص جديد داخل متغير                                       

myElement.className = product; عمل كلاس نيم للمتغير                                                               
myElement.setAttributeNode(myattr); اضافه الاتربيوت الجديد الفارغ الى الديف                                   
myElement.setAttribute(data-test,testing);عمل اتربيوت واعطاءه قيمه مباشره                
Append Text To element
myElement.appendChild(mytext) اضافه النص الى العنصر                                                           
Append Element To body
document.body.appendChild(myElement) اضافه العنصر كامل بعد الانتهاء من الاتربيوت والكلاس الى البودى         
لاضافه كومنت بنفس الطريقه يتم عمل الكومنت فى متغير ثم اضافه الكومنت الى العنصر 
let mycomment = document.createComment(This Is Div) انشاء الكومنت داخل متغير 
اضافه الكومنت الى العنصر 
Append comment To element
myElement.appendChild(mycomment)
الخطوات ثابته فى جميع العناصر 
انشاء ثم اضافه وفى النهايه عرض العنصر فى البودى
#090 - Product With Title And Description
مثال متقدم 

let myMainElement = document.createElement(div);
let myHeading = document.createElement(h2);
let myParagraph = document.createElement(p);

let myHeadingText = document.createTextNode(Product Title);
let myParagraphText = document.createTextNode(Product Description);

 Add Heading Text
myHeading.appendChild(myHeadingText);

 Add Heading To Main Element
myMainElement.appendChild(myHeading);

 Add Paragraph Text
myParagraph.appendChild(myParagraphText);

 Add Paragraph To Main Element
myMainElement.appendChild(myParagraph);

myMainElement.className = product;

document.body.appendChild(myMainElement);
نفس فكره المثال السابق تم عمل ديف رئيسى وعمل هيد وبراجراف واضافه الهيد والبراجراف داخل الديف ثم طباعه الديف فى البودى
#091 - Deal With Childrens
التعامل مع الابناء 
Children
تقوم بأظهار العناصر فقط يمكن تحديد العنصر المطلوب عن طريق الاندكس الخاص به
let myelement =document.querySelector(div)

console.log(myelement)
console.log(myelement.children[0]) =  p , span 

ChildNodes
تقوم بأظهار جميع العناصربما فيها الكومنت والفواصل 
let myelement =document.querySelector(div)

console.log(myelement)
console.log(myelement.childNodes[0]) text ,span , p, comment
ويمكن تحديد العنصر من رقم الاندكس 
firstChild
يظهر اول عنصر 
lastChild
يظهر اخر عنصر 
let myelement =document.querySelector(div)

console.log(myelement)
console.log(myelement.children)
console.log(myelement.children[0])
console.log(myelement.childNodes) يظهر جميع العناصر 
console.log(myelement.childNodes[0])ويمكن تحديد العنصر بأستخدام رقم الاندكس

console.log(myelement.firstChild)=Hello Div يظهر اول ابن 
console.log(myelement.lastChild)=comment Hello يظهراخر  ابن 

console.log(myelement.firstElementChild)= pHello pp  يظهر او ل عنصر   
console.log(myelement.lastElementChild)=span Hello Spanspan يظهر اخر عنصر 
#092 - DOM Events
الاحداث او الافعال داخل الدوم
يمكن استخدامها داخل ملف الجافااسكريت او ملف هتمل
  داخل هتمل 
Onclick
button onclick=console.log(`Clicked`)Buttonbutton
لطباعه الكلمه فى القنصل عند الكليك
بالنسبه لاستخدام داخل الجافا اسكريبت عن طريق 
let myBtn =document.getElementById(btn);

myBtn.onclick=function(){
    console.log(clicked)
}
Oncontextmenu 
خاصه بالكليبك اليمين
myBtn.oncontextmenu=function(){
    console.log(clicked)
}
Onmouseenter
Onmouseleave
عند مرور الماوس او مغادرته 
Onload

Onscrol
window.onscroll=function(){
    console.log(scroll)
}يقوم بالعد عن عمل اسكورل للصفحه 
Onresize
window.onresize=function(){
    console.log(scroll)
}عند تغيير حجم الصفحه 

Onfocus
خاصه بالفورم عند التركيز على الحقل 

عند مغادره الحقل 
Onsubmet
عند الضغط على زر الادخال 

#093 - Validate Form And Prevent Default
التحقق من القيم وايقاف تشغيل القيم
document.links[0].onclick= function(event){
console.log(event);
event.preventDefault()تعمل على ايقاف تشغيل الخاصيه
};


let userinput =document.querySelector([name='username'])تم تحديد العنصر بأستخدام اسمه بالكويرى سليكتورمعمتغير
let ageinput =document.querySelector([name='age']) تم تحديد العنصر بأستخدام اسمه بالكويرى سليكتو ووضعه فى متغير

document.forms[0].onsubmit = function (e) { تم تحديد الفورم الاولى بأستخدام الاندكس 
let uservalid=false         تم عمل فنكشن  واضافه اتنين من المتغيرات بداخلها  يوسير والايج لكى يتم التحكم         
let agevalid=false

console.log(userinput.value); تم طباعه  اليوسرانبوت  للتوضيح 
console.log(userinput.value.length);نفس الامر 

if(userinput.value!== && userinput.value.length =10){فى حاله اذا كانت اليوسرانبوت ليست  فارغه او كان طولها اقل من عشره اذا  اليوسير فالد تساوى ترو
    uservalid=true
}
if(ageinput.value!==){اذا كان الايج انبوت ليست فارغه اذا الايج فالد ترو  
agevalid=true
}
يبقى احنا كده عملنا الشروط ان لازم المستخدم يدخل حروف فى الانبوت وتكون اقل من عشره وبردو الايج انبوت ميكونش فارغ فبالتالى هطبق الشرط الخير 
if(uservalid===false  agevalid===false){
    e.preventDefault();
}}اذا كانت كل القيم او بعضها غير صحيحه لم ينطبق عليها الشروط لن يتم ارسال البيانات والله المستعان 

#094 - Event Simulation - Click Focus Blur
التحكم فى العناصر مباشره 
عند الضغط عليها او مغادرتها 
let two =document.querySelector(.two)تم عمل متغير للتحكم فى العنصر  الثانى
let one =document.querySelector(.one) تم عمل متغير للتحكم فى العنصر الاول

window.onload = function (){عند اعاده تحميل الصفحه يتم التركيز على الانبوت الثانى 
    two.focus();
};
one.onblur = function () {عند مغادره الصفحه يتم الضغط على الرابط 
    document.links[0].click();
};

#095 - Class List Object And Methods
Class List
يمكن اضافه او حذف كلاس او البحث عن كلاس موجود فى العنصر 

let element =document.getElementById(my-div)

console.log(element.classList)= one', 'two', 'show', 'test',
console.log(element.classList.length)=4
console.log(typeof element.classList)=object
console.log(element.classList.contains(osama))=false
console.log(element.classList.contains(show))=true
console.log(element.classList.item(0))=one


element.onclick=function(){
    element.classList.add(add-one,add-two)
}=  عند الكليك ينشىء اكثر من كلاس بأستخدام الادد

element.onclick=function(){
    element.classList.remove(add-one,add-two)
}=يحذف كلاس او اكثر بأستخدام الادد عند الكليك 

element.onclick=function(){
    element.classList.toggle(show)
}= فى حاله عدم وجود الكلاس يتم اضافته اما اذا كان الكلاس موجود يتم حذفه 

#096 - CSS Styling And Stylesheets
التحكم فى خواص سى اس اس عن طريق الجافا اسكريبت
let element =document.getElementById(my-div);

element.style.color =red=يمكن عن طريق الاستيل اضافه اى خاصيه  
element.style.fontWeight =bold=الخواص التى تتكون من مقطعين تتبع الكاميل كيس 
=طريقه كتابه جميع العناصر  فى سطر 
element.style.cssText = font-weightbold; colorgreen; opacity0.9

=setproperty ,removeproperty طريقه حذف واضافه الخواص من العناصر 
=  او ملف الجافا اسكريبت من الان لاين 
element.style.removeProperty(color);=هيتم حذف اللون 
element.style.setProperty(font-size,40px,important);
=السيت بروبيرتى تقبل منك  الاسم والقيمه والامبورتنت

= طريقه اف من ملف السى اس اس نفسه 
document.styleSheets[0].rules[0].style.removeProperty(line-height)
document.styleSheets[0].style.setProperty(background-colorred)=طريقه الاضافه 

#097 - Before, After, Prepend, Append
طريقه اضافه عناصر او نصوص قبل وبعد العنصر وحذف العنصر نهائيا 
let element =document.getElementById(my-div);

let createdp =document.createElement(p);=طريقه اتعلمنها قبل كدا لانشاء عنصر 

element.before(Hello from js )  (نص) البيفور بتقوم بأنشاء عنصر قبل العنصر
element.after(Hello  js )الافتر تقوم بأنشاء العنصر بعد العنصر 
يبقى كدا اتعلمنا فى السابق انشاء عنصر وادخال النص وباقى العناصر به
ودلوقتى عرفنا ازاى ننشىء عنصر قبل العنصر او بعده عن طريق استخدام البيفور والافتر
  طريقه انشاء عنصر جديد بأستخدام البيفور والافتر عن طريق اضافه اسم العنصر 
element.before(createdp) 
element.after(createdp)

= append  يقوم بأضافه النص او العنصر فى نهايه العنصر 

element.append(  hello from js )
element.append(createdp)
=preppend تقوم بأضافه النص او العنصر فى بدايه العنصر الحالى 
element.prepend(  hello from js )
element.prepend(createdp)

 remove لا تقبل قيم وتقوم بحذف العنصر نهائيا  عكس الديسبلاى نن
element.remove()
#098 - DOM Traversing
الانتقال بين العناصر 
let element =document.getElementById(my-div);

let span =document.querySelector(.two);

console.log(span.nextSibling);=يقوم بأظهار محتوى السطر التالى مباشره 
console.log(span.nextElementSibling.remove());= يقوم بأظهار العناصر فقط 

console.log(span.previousElementSibling)=البريفيس تظهر العنصر الى قبله 
console.log(span.previousSibling);=وهنا تظهر السطر الى قبله سواء كان عنصر او كومنت 

console.log(span.parentElement);=تقوم بحذف الاب 

span.onclick =function(){
    span.parentElement.remove()
}
#099 - DOM Cloning
فى حاله اخذ النسخه الكلون يقبل اما ترو او فولس 
اذا كانت فولس او فارغه يأخذ نسخه من العنصر بدون العناصر الداخليه .
واذا كانت الكلون تحتوى على ترو يتم اخذ العنصر مع جميع العناصر الموجوده بداخله 
let myp = document.querySelector(p).cloneNode()
let mydiv = document.querySelector(div) = اخذ نسخه من العنصر بالكلاس فقط بدون العناصر الداخليه 
عند اضافه ترو داخل الكلون يتم اخذ جميع العناصر 
let myp = document.querySelector(p).cloneNodeف(true)
let mydiv = document.querySelector(div)

mydiv.appendChild(myp) يتم اخذ نسخه من العنصر وجميع العناصر الموجوده بداخله 
id مهمه جدا جدا 
عند اخذ نسخه من العنصر يتم اخذ اىدى العنصر والكلاس ايضا 
لذلك يجب تغيير اى دى العنصر والكلاس الجديد
let myp = document.querySelector(p).cloneNode(true)
let mydiv = document.querySelector(div)

mydiv.appendChild(myp) 

myp.id=`clone`;=تم تغيير اى دى العنصر الجديد وليس القديم مهمه جدا
#100 – AddEventListener
فى حاله استخدام الفنكشن العاديه فى الايفنت لايقبل الا عمليه واحده فقط وهى اخر عمليه 
let myp = document.querySelector(p)
myp.onclick = one
myp.onclick = two
=hello mr arafa 2
function one (){
    console.log(`hello mr arafa 1`)
}
function two (){
    console.log(`hello mr arafa 2`)
}

لكن فى حاله استخدام الايفنت ليسنر يتم قبول اكثر من عمليه كما يلى 
let myp = document.querySelector(p)
function one (){
    console.log(`hello mr arafa 1`)
}
function two (){
    console.log(`hello mr arafa 2`)
}

myp.addEventListener(click,one);=hello mr arafa 1
myp.addEventListener(click,two);=hello mr arafa 2
طريقه عمل نسخه من البراجراف او اى عنصر عند الضغط عليه 
مع اخذ نسخه منه وطباعتها فى الصفحه 
let myp = document.querySelector(p)
myp.onclick =function (){
    let newp =myp.cloneNode(true)
    newp.className =clone
    document.body.appendChild(newp)
   }
طريقه عمل ايفنت لعنصر لم يتم انشاءه فى الصفحه بعد
عن طريق التارجت
التارجت معناها العنصر المستهدف او الذى تم الضغط عليه   
  document.addEventListener(click, function(e) {
    if(e.target.className === clone){
        console.log(`iam clone `)
    }
   })
#101 - DOM Challenge
تم حل التحدى لكن بدون عمل اللوب داخل الصفحه 
Header 
let header = document.createElement(div);
header.className = header
header.style.margin=-8px ;
header.style.display=flex;
header.style.justifyContent= space-between;
header.style.alignItems=center ;
header.style.backgroundColor=#64c9648a;
    logo for herder 
let logodiv = document.createElement(div);
let logo =document.createElement(span);
logo.className = spanH
logo.append(`Elzero`)
logodiv.append(logo)


    nav for header    
let nav =document.createElement(div);
nav.className = nav;
let span1=document.createElement(span)
span1.append(`Home`)
let span2=document.createElement(span)
span2.append(`About`)
let span3=document.createElement(span)
span3.append(`Services`)
let span4=document.createElement(span)
span4.append(`contact`)

nav.append(span1,span2,span3,span4)

span1.style.marginRight=10px
span1.style.padding=10px
span1.style.borderBottom=2px solid green
span2.style.marginRight=10px
span2.style.padding=10px
span2.style.borderBottom=2px solid green
span3.style.marginRight=10px
span3.style.padding=10px
span3.style.borderBottom=2px solid green
span4.style.marginRight=10px
span4.style.padding=10px
span4.style.borderBottom=2px solid green

header.appendChild(logo);
header.appendChild(nav);

nav.style.display=flex;
nav.style.justifyContent= space-between;
nav.style.alignItems=center ;
 Main-Div  

let content = document.createElement(div);
content.className=content;
content.style.backgroundColor=#eee;
content.style.display=grid;
content.style.gridTemplateColumns=repeat(auto-fill, minmax(350px, 1fr))
content.style.justifyItems=center;
content.style.marginTop=20px;

let product =document.createElement(div);
product.className=product;
product.style.backgroundColor=white;
product.style.display=grid;
product.style.justifyItems=center;
product.style.marginTop=20px;
product.style.marginBottom=20px;

let producth =document.createElement(h3);
product.append(1);
producth.style.margin=10px 15px;

let productp =document.createElement(p);
productp.append(product);
productp.style.margin=10px 15px;

product.append(producth);
product.append(productp);
content.append(product)

loop 
let productloop=[product]
let productlength=15;
for( i=0 ; iproductlength ; i++){
    if(product.className===1 ){
       
      content.append(productloop[0]+i)
        }

}

let footer = document.createElement(div);
footer.className=footer;
footer.style.backgroundColor=#64c9648a;
footer.style.display=grid;
footer.style.justifyItems=center;
footer.style.marginTop=20px;

let footerp =document.createElement(p);
footerp.append(Copy Right 2021);
footerp.style.margin=10px 15px;
footer.append(footerp)
 footer.append(footerul)

 add to body 

document.body.appendChild(header);
document.body.appendChild(content);
document.body.appendChild(footer);







#102 - What Is BOM
Browser Object Model
نماذج كائنات المتصفح 
Window object
الصفحه الخاصه بالمتصفح وهى عباره عن اوبجيكت تحتوى على دوم
الكونسول جزء داخل الويندو
والدوكوممنت جزء داخل الويندو
يمكن التحكم بكل شىء فى الصفحه من خلال الويندو 
يوجد الكثير من الاجراءات يمكن القيام بها مثل اظهار تنبيه او اخفاء او تكبير او طباعه او تخزين البيانات او حفظها 
 BOM [Browser Object Model]
  - Introduction
  --- Window Object Is The Browser Window
  --- Window Contain The Document Object
  --- All Global Variables And Objects And Functions Are Members Of Window Object
  ------ Test Document And Console
  - What Can We Do With Window Object 
  --- Open Window
  --- Close Window
  --- Move Window
  --- Resize Window
  --- Print Document
  --- Run Code After Period Of Time Once Or More
  --- Fully Control The URL
  --- Save Data Inside Browser To Use Later

window.document.title = Hello JS;

#103 - Alert, Confirm, Prompt- Bom
Alert
تنبيه يظهر للمستخدم يقوم بأظهار رساله معينه فقط
ويوجدمكتبات جاهزه له 
 فى الجلوبال رولز يمكن كتابه الويندو او الزيس او بدونهم وتعطى نفس النتائج 
window.alert(test)
this.alert(test)
alert(test)

 يطلب مسج فقط من المستخدم
 نادر الاستخدام 

console.log(test)
Confirm
التأكيد
يقوم بسؤال المستخدم ويعطى قيم  صح او خطا
ويمكن التعامل مع القيم حسب النتيجه كما يلى 
let confirmmsg =confirm(Are You Sure);

console.log(confirmmsg)

if (confirmmsg===true){
  console.log(Item Deleted)
  }else{
    console.log(ok)
  }
Prompt
الاستدعاء
يقوم بأرجاع القيمه او الاجابه التى ادخلها المستخدم ويمكن التعامل معها 
وتقبل قيمه ديفولت لاعطاء تلميحات داخل الانبوت
E

#104 - setTimeout and clearTimeout Bom
مهم جدا جدا
تقوم بتحديد وقت معين لفعل شىء معين 
تقبل منك الفنكشن والوقت والبارميتر
setTimeout( function()  {
  console.log(msg)
}, 5000); الوقت يحسب بالثوانى خمسه الاف  يعنى خمس ثوانى 

لو عندك فنكشن جاهزه ممكن نستخدمها داخل السيت تايم كمايلى 

function saymsg(){
  console.log(`i am massage`)
}

setTimeout(saymsg, 3000);=i am massage تظهر بعد 3 ثوان ى
لو عاوز اضيف ارجيو منت داخل الفنكشن بيتم اضافته بعد عدد الثوانى فى السيت تيم كما يلى 
function saymsg(user){
  console.log(`i am massage  for ${user}`)
}

setTimeout(saymsg, 3000,osama);=i am massage  for osama
يمكن اضافه اكثر باراميتر كما يلى 
function saymsg(user,age){
  console.log(`i am massage  for ${user} his age is ${age}`)
}

setTimeout(saymsg, 3000,osama, 30);=i am massage  for osama his age is 30
clearTimeout
يقوم بأيقاف عمل السيت تايم اوت فى خلال المهله الزمنيه له
يقبل قيمه الكونتر 
function saymsg(){
  console.log(`i am mssage  `)
}

 let counter=  setTimeout(saymsg, 3000);قيمه الكونتر تساوى السيت تايم اوت و

let btn=document.querySelector(button);

btn.onclick=function(){
  clearTimeout(counter) تم التعويض بقيمه الكونتر داخل الكلير تايم اوت 
}
#105 - setInterval and clearInterval
نفس عوامل السيت تايم 
لكن السيت انتيرفال تقوم بطباعه الامر كل عدد معين من الثوانى     يسمى الميل سكند وهوا الثانيه مقسمه الى الف جزءبأستمرار او لحين ايقافها عكس السيت تايم تقوم بطباعه الامر مره واحده فقط 
كما يلى 
setInterval(function(){
  console.log(`msg`)
},1000)
هنا يقوم بطباعه الرساله فى الكونسول كل ثانيه الى مالا نهايه 
نفس النتيجه بأستخدام الفنكشن 
setInterval(saymsg,1000)

 function saymsg(){
  console.log(`msg`)
}
استخدام الباراميتر داخل الفنكشن 
setInterval(saymsg,1000,arafa,34)

 function saymsg(user,age){
  console.log(`msg ${user}${34}`)
}=msg arafa34
استخدام السيت انتيرفال لتقليل رقم العنصر
اولا عمل فنكشن خاصه بالديف بها رقم معين (5)  
let div =document.querySelector(div)تحديد ديف داخل الهتمل

function countdown(){عمل فنكشن لتقليل العدد داخل الديف -1 كل مره يتم استخدامها 
  div.innerHTML-=1
}
ثانيا استعمال السيت انتيرفال كما يلى 
let div =document.querySelector(div)

function countdown(){
  div.innerHTML-=1
}

let counter =setInterval(countdown,1000)تم التعويض بالفنكشن داخل السيت انتيرفال واعطا~ه الزمن 
ثالثا ايقاف العد عند حد معين بأستخدام الجمله الشرطيه 
let div =document.querySelector(div)

function countdown(){
  div.innerHTML-=1
  if(div.innerHTML===0){تم وضع الجمله الشرطيه واضافه الكونتر داخل الكلير انتيرفال
    clearInterval(counter)
  }
}

let counter =setInterval(countdown,1000)
#106 - Window Location Object
الموقع لوكيشن 
يقوم بأظهار معلومات الصفحه كامله 
استعداء اللوكيشن get
console.log(location)يقوم بأظهار معلومات الصفحه (الادى) والعنوان والمستخدم 
console.log(location.href)fileDmyprojectLearn-JavaScriptindex.htmlعند تحديد عنصر معين يظهره
set تغيير اللوكيشن 
location.href=httpsgoogel.com; عن طريق وضع اسم الموقع داخل الوكيشن ريف 
اللوكيشن اتشريف لايقوم بمسح المواقع التى تمت زيارتها من السجل
يمكن تحديد لينك معين داخل الصفحه للانتقال اليه او لينك خارج الصفحه فى موقع اخر 
location.href= #sec02;
location.href= httpsdeveloper.mozilla.orgen-USdocsLearnJavaScriptObjectsObject-oriented_programming;
location.host
location.hostname
الهوست يقوم بأظهار اسم الموقع مع البورت 
الهوست نيم يظهر اسم الموقع فقط عكس الريبلاس
console.log(location.host)=127.0.0.15500
console.log(location.hostname)127.0.0.1
يمكن من خلالهم تغييراسم الموقع فقط بدون باقى البروتوكول
مثلا الزيرو فقط وباقى الرابط ثابت 

( https)   (http)Protocol
البروتوكول هوا الاتفاقيه التى يتم فتح الموقع من خلالها 
console.log(location.protocol)='file'
هنا فايل علشان انا فاتح من الملف بتاعى 
'https'
لو على اى موقع تانى هيظهر النتيجه دى علشان المواقع عامله استضافه 
الهاش location.hash
ممكن اجيب الهاش لوحده فى الصفحه 
console.log(location.hash)=http127.0.0.15500#sec02
reload
بتعمل اعاده تحميل للصفحه 
console.log(location.reload())
location.replace
تقوم بتغيير العنوان مع عدم الاحتفاظ بالهستورى
console.log(location.replace())
assign
تقوم بتغيير عنوان الصفحه مع الابقاء على باقى العناوين السابقه 

console.log(location.assign())


#107 - Window Open And Close
window.close()
تقوم بأغلاق النافذه التى تم فتحها عن طريق الجافا اسكريبت فقط 

window.open()
بتقبل 4 معطيات وجميعهم اختيارى 
الاول اسم الموقع 
الثانى سلف او بلانك يعنى فى نفس الصفحه او صفحه خارجيه 
الثالت الفيتشر اى الخصائص الطول والعرض 
المكان الاسفل او الاعلى 
setTimeout(function(){
    window.open(,,) فارغه 
},2000)

setTimeout(function(){
    window.open(httpsgoogle.com,_self,width=400,height=400, left=300,top=50)
},2000)
#108 - Window History Object

افعال السجل داخل الويندو 
history.length
طول السجل يظهر عدد الصفحات التى تمت زيارتها 
history.back()
يقوم بأرجاع المتصفح للصفحه السابقه 
history.forward()
يقوم بالذهاب الى الصفحه التاليه 
history.go(0,1,-1)
الجو بتقبل منك القيم بالارقام وتقوم بالذهاب الى رقم العنصر فى السجل السالب للخلف الموجب للامام والصفر نفس الصفحه او ريفرش

#109 - Scroll, ScrollTo, ScrollBy, Focus

window.stop()
يقوم بأيقاف تحميل الصفحه 
window.print()
يقوم بأظهار خيارات الطباعه وصفحتها
Window.focus()

let mynewWindow =window.open(httpsgoogle.com,,width=500,height=500)
قوم بفتح الصفحه فى متصفح جديد واستدعائها او التركيز عليها بأستخدام الويندو فوكس واغلاقها بالويندوكلوز
 او اسكرول فقطwindow.scrollTo(500,500)
الاسكرول يقوم بالذهب الى الاحداثيات التى ادخلتها داخل الاسكرول ولها قيمتن الاكس والواى 
وعند تكرارها يذهب الى نفس الاحداثيات يعنى لا يتغير الموقع 
window.scrollBy(500,500)
يقوم بالتحرك بمقدار القيمه كل مره يتم الاستخدام فيها 
وليس موقع ثابت كما اسكرول تو
الاسكرول تقبل القيم وليس اعداد فقط كما يلى 
window.scroll({
    left1500,
    top1500,تم التحرك  بنفس القيم المكتوبه فى الاتجاهات مع حركه ناعمه او بطيئه بأستخدام الاسموز
    behaviorsmooth
})

#110 - Scroll To Top Using Y Practice
تطبيق عملى 
الاسكرول اكس وواى تساوى باج اكس سيت وواى
 console.log( window.scrollx === window.pageXOffset)
 console.log( window.scrollY === window.pageYOffset)
 
لعمل اظهار للاسكرول داخل الكونسول محور واى 

window.onscroll=function(){
    if(window.scrollY = 600 ){
        console.log(`scrolling Y is  ${window.scrollY}`)
    }
}
تطبيق لعمل زار  اب للصفحه  
body
    styleتنسيقات السى اس اس  داخل التش تى ام ال 
        body{
            height 5000px;
            width 5000px;
        }
        button{
 background-color red;
    color white;
    border none;
    padding 5px;
    border-radius 10px;
    font-size medium;
    position fixed;
    bottom 50px;
    right 50px;
    display none;
    cursor pointer;
        }
    style
buttonUPbutton

    
    script src=main.jsscript
body
تنسيقات الجافا اسكريبت 
let btn =document.querySelector(button)تحديد العنصر 

window.onscroll=function(){تحديد الاسكرول 
    if(window.scrollY = 600 ){تحديد شرط الاسكرول 
       btn.style.display =block
    }else{
        btn.style.display =noneتحديد فى حاله عدم تحقق الشرط 
    }
}
btn.onclick=function(){عمل الفنكشن عند الضغط على الزرار 
    window.scroll({

        left0,
        top0,
        behaviorsmooth
    })
}


#111  local Storage 
يوجد عده طرق لاضافه اللوكال استورايج فى الصفحه 
set
window.localStorage.setItem(color,#f00);= fontSize  20px  
window.localStorage.fontweight =bold;= color  #f00  
window.localStorage[fontSize] =20px; =fontweight  bold

console.log(window.localStorage)
console.log(typeof window.localStorage) 
get طريقه ال
  get 
console.log(window.localStorage.getItem(color))=#f00
console.log(window.localStorage.color)=#f00
console.log(window.localStorage[color])=#f00
Set clor on Page 
document.body.style.backgroundColor =window.localStorage.getItem(color)
remove
الازاله 
window.localStorage.removeItem(color);
تحديد جميع الاستورج اوبجيكت وازالتها 
window.localStorage.clear();
key  
يأخذ رقم الاندكس لمعرفه وتحديد الاوبجيكت 
فى حاله استخدام المتصفح المخفى جميع الاوبجيكت بتحذف 

#112  local Storage color 
Application Practice
لتحديد عنصر وطباعه اللون الخاص به عند الضغط عليه 

let lis =document.querySelectorAll(ul li);

lis.forEach((li) = {
    li.addEventListener(click, (e) ={
        console.log(e.currentTarget.dataset.color)
    });
});
تطبيق على اللوكال استوريج بتخزين اللون واضافه الكلاس للعنصر
!DOCTYPE html
html lang=en
head
    meta charset=UTF-8
    meta http-equiv=X-UA-Compatible content=IE=edge
    meta name=viewport content=width=device-width, initial-scale=1.0
    titleDocumenttitle
    link rel=stylesheet href=main.css
   
    style
.body{
    background-color #eee;
}
ul{
    padding 0;
    margin 0;
    background-color #ddd;
    margin 20px auto;
    width 300px;
    list-style none;
    display flex;
    justify-content space-between;

}
ul li {
    width 50px ;
    height 50px;
    border 20px solid #ddd;
    opacity 0.4;
    cursor pointer;
    transition 0.3s;
}
ul li.active,
ul lihover{
    opacity 1;
    
}
ul lifirst-child{
    background-color red;
}
ul linth-child(2){
    background-color green;
}
ul linth-child(3){
    background-color blue;
}
ul linth-child(4){
    background-color black;
}
.experiment {
    background-color red;
    width 400px;

    height 150px;
    margin 80px auto;

}
    style
head
body
   
ul
    li class=active data-color=redli
    li data-color=greenli
    li data-color=blueli
    li data-color=blackli
ul
div class=experimentdiv
    
    script src=main.jsscript
body
html
  اكواد الجافا اسكريبت 

let lis =document.querySelectorAll(ul li);
let exp =document.querySelector(.experiment)
 window.localStorage.clear();

if(window.localStorage.getItem(color)){ if there is color
 [1]Add color to dive
 exp.style.backgroundColor=window.localStorage.getItem(color);
 [2]Remove active class 
   lis.forEach((li)= {
            li.classList.remove(active)
        });
[3] Add active class to current color 
document.querySelector(`[data-color=${window.localStorage.getItem(color)}]`).classList.add(active)
    }

lis.forEach((li) = {
    li.addEventListener(click, (e) ={
         console.log(e.currentTarget.dataset.color)
        Remove Active class from all lis 
        lis.forEach((li)= {
            li.classList.remove(active)
        });
        Add Active Class To Current Element
        e.currentTarget.classList.add(active);
        Add Current color to local Storage 
        window.localStorage.setItem(color,e.currentTarget.dataset.color);
        Change div background color تحدي الديف واعطائه لون بـأستخدام الاستيل وهولون العنصر 
        exp.style.backgroundColor=e.currentTarget.dataset.color;
    });
});


#113  Session Storage & use Case
السيشن استوريج نفس خواص الوكال استوريج 
لكن السيشن استورج يحتفظ بالبيانات داخل الجلسه فقط
وليس دائما كما يعمل اللوكال استوريج 

document.querySelector(.name).onblur =function(){
     console.log(this.value)
    window.sessionStorage.setItem(input,this.value)
}html
 form action=
        input class=name type=text
    form


#114 - BOM Challenge
اكواد لغه الهتمل 

!DOCTYPE html
html lang=en
head
    meta charset=UTF-8
    meta http-equiv=X-UA-Compatible content=IE=edge
    meta name=viewport content=width=device-width, initial-scale=1.0
    titleDocumenttitle
    link rel=stylesheet href=main.css
    style
        body {
            font-family Arial, Helvetica, sans-serif;
        }
    
        .container {
            width 500px;
            margin 20px auto;
        }
    
        .form {
            background-color #eee;
            border-radius 6px;
            padding 20px;
            display flex;
            align-items center;
        }
    
        .input {
            padding 10px;
            border 1px solid #ddd;
            border-radius 6px;
            flex 1;
        }
    
        .inputfocus {
            outline none;
        }
    
        .add {
            border none;
            background-color #f44336;
            color white;
            padding 10px;
            border-radius 6px;
            margin-left 10px;
            cursor pointer;
        }
    
        .tasks {
            background-color #eee;
            margin-top 20px;
            border-radius 6px;
            padding 20px;
        }
    
        .tasks .task {
            background-color white;
            padding 10px;
            border-radius 20px;
            display flex;
            justify-content space-between;
            align-items center;
            transition 0.3s;
            cursor pointer;
            border 1px solid #ccc;
        }
    
        .tasks .tasknot(last-child) {
            margin-bottom 15px;
        }
    
        .tasks .taskhover {
            background-color #f7f7f7;
        }
    
        .tasks .task.done {
            opacity 0.5;
        }
    
        .tasks .task span {
            font-weight bold;
            font-size 10px;
            background-color red;
            color white;
            padding 2px 6px;
            border-radius 4px;
            cursor pointer;
        }
    style
head
body
    
   
   div class=container
    div class=form
        input type=text class=input
        input type=submit class=add value=Add Task
    div
    div class=tasksdiv
   div
    script src=main.jsscript
body
html
اكواد لغه الجافا اسكريبت
let input = document.querySelector(.input);
let submit = document.querySelector(.add);
let tasksDiv = document.querySelector(.tasks);
empty array to store the tasks
let arrayOfTasks=[];
 check if theres tasks in local storeage
if(localStorage.getItem(tasks)){
arrayOfTasks=JSON.parse(localStorage.getItem(tasks))
}

trigger get data from local storeage function
getDataFromLocastorage();

Add task
submit.onclick = function(){
  if(submit.value !==){
    addTaskToarray(input.value);Add task to array
    input.value=;
  }
};
click on task element
tasksDiv.addEventListener(click,(e)={
  Delete Button
  if(e.target.classList.contains(del)) {
    remove task from local storeage
    deleteTaskwith(e.target.parentElement.getAttribute(data-id));
     remove element from page
    e.target.parentElement.remove()
    }
    task Element 
    if(e.target.classList.contains(task)){
      toggle completed for the task
      toggleStatusTaskWith(e.target.getAttribute(data-id))
      toggel done class
      e.target.classList.toggle(done)
    }
})
function addTaskToarray(taskText){
  Task Data
  const task ={
  idDate.now(),
  titletaskText,
  completedfalse,
  };
  push tasks to array of tasks
  arrayOfTasks.push(task);
  add tasks to page 
  addElementsToPageFrom(arrayOfTasks);
  add tasks to local storeage
  addDataToLocalStoragefrom(arrayOfTasks)
  }

function addElementsToPageFrom(arrayOfTasks){
Empty tasks div
tasksDiv.innerHTML=;
looping on Arry of tasks 
arrayOfTasks.forEach((task)={
  Create main div 
  let div =document.createElement(div);
   div.className =task;
   check if task is done
   if(task.completed=== true){
    div.className =task done;
   }
   div.setAttribute(data-id,task.id);
   div.appendChild(document.createTextNode(task.title));
   create Delete button
   let span=document.createElement(span);
   span.className=(del);
   span.appendChild(document.createTextNode(Delete))
   append button to main div
   div.appendChild(span);
 add task div to tasks contain 
 tasksDiv.appendChild(div);

})
}

function addDataToLocalStoragefrom(arrayOfTasks){
  window.localStorage.setItem(tasks,JSON.stringify(arrayOfTasks))
}

function getDataFromLocastorage(){
  let data = window.localStorage.getItem(tasks);
  if(data){
    let tasks =JSON.parse(data);
    addElementsToPageFrom(tasks)
  }
}

function deleteTaskwith(taskId){
  for Explain Only
   for(let i=0; iarrayOfTasks.length;i++){
     console.log(`${arrayOfTasks[i].id}===${taskid}`)
   }
  arrayOfTasks = arrayOfTasks.filter((task) = task.id != taskId)
  addDataToLocalStoragefrom(arrayOfTasks)
}

function toggleStatusTaskWith(taskId){

 for(let i=0; iarrayOfTasks.length;i++){
    if(arrayOfTasks[i].id ==taskId ){
      arrayOfTasks[i].completed==false(arrayOfTasks[i].completed=true)arrayOfTasks[i].completed=false
    }
  }
  addDataToLocalStoragefrom(arrayOfTasks);
}
فى النهايه يمكن عمل زرار حذف الكل بأستخدام الكلير للوكال استوريج واستخدام انهيرت هتمل للتاسك ديف فارغ وشكرا


#115 - Destructuring Arrays Part 1
يمكن اخذ البينات من المصفوفات واضافتهم فى متغيرات جديده وتوزيعهم
انشاء متغيرات جديده للمصفوفه
let myfrinds =[Ahmed,sayed,Ali,Maysa]

let [a,b,c,d]=myfrinds= Ahmed sayed Ali Maysa
 تم عمل تعريف للمتغيرات عن طريق عمل مصفوفه وكتابه العناصر ومساوتها بالمصفوفه الاليه 
تم عمل تعريف لعناصر المصفوفه بأستخدام الديستراكتنج
ليس شرطا ان يكون عدد المتغيرات مساوى لعدد عناصر المصفوفه 
لو اقل هيطبع العدد المكتوب بدون الزياده 
لو زياده عن عدد المصفوفات هيطبع الموجود ويعطى غير معرف للعنصر الزائد عن عناصر المصفوفه
let a=1;
let b=2;
let c=3;
let d=4;
let myFriends = [Ahmed, Sayed, Ali, Maysa];

[a, b, c] = myFriends;

console.log(a)=Ahmed
console.log(b)=sayed
console.log(c)=Ali
console.log(d)=4 فى حاله الزياده عن عدد العناصر تم اخذ قيمه المتغير الاخير من الديكليراشن الجلوبل
فى حاله الزياده 
let a=1;
let b=2;
let c=3;
let d=4;
let myFriends = [Ahmed, Sayed, Ali, Maysa];

[a, b, c, d, e] = myFriends;

console.log(a)=Ahmed
console.log(b)=sayed
console.log(c)=Ali
console.log(d)=4
console.log(e)=undefined  or
console.log(myFriends[5])=undefined
ويمكن تعويض القيمه الغير موجوده فى الاراى بهذه الطريقه 
[a, b, c, d, e=osama] = myFriends;
console.log(e)=osama or
console.log(myFriends[5])=undefined
لو عاوز تتجاوز عنصر او تتجاهله هتسيب مكانه فاضى 
let [x, y, , z] =myFriends;
console.log(x)=Ahmed
console.log(y)=Sayed
console.log(z)=Maysa
#116 - Destructuring Arrays Part 2
مثال متقدم للديستراكتشنج
عمل نستيد ارارى او مصفوفه متداخله 
let myFriends = [Ahmed, Sayed, Ali, [shady,amr,[mohamed,gamal]]];
console.log(myFriends[3][2][1]);=gamal
للوصول ل اسم جمال من خلال رقم الاندكس 
لكن للوصول للاسماء عن طريق الديستراكشن يتم ك الاتى

let myFriends = [Ahmed, Sayed, Ali, [shady,amr,[mohamed,gamal]]];
 let [ , , ,[a, , [ ,b]]]= myFriends

console.log(a)=shady
console.log(b)=gamal
عن طريق ترك مسافات فارغه وتحديد العنصر المطلوب 
او حذف العناصر من المصفوفه الاصليه واستخدام المتغيرات فى مصفوفه جديده
let myFriends = [Ahmed, Sayed, Ali, [shady,amr,[mohamed,gamal]]];
let myFriends = [, , , [a, ,[ ,b]]];نفس المصفوفه تم حذف العناصر منها وتعويض بالمتغيرات فى اماكن العنصر 
 let [ , , ,[a, , [ ,b]]]= myFriends
console.log(a)=shady
console.log(b)=gamal

#117 - Destructuring Arrays Part 3 - Swap Variables
طريقه عمل الاسواب او تبديل القيم بأستخدام المتغيرات 
let book =video
let video =book
save book value in stach
let stash=book;=video
change book value 
 book=video
change video value
 video=stash

 console.log(book)
 console.log(video)
 console.log(stash)
طريقه عمل الاسواب او تبديل القيم بأستخدام الدستراكشن 
let book = Video;
let video = Book;
[book, video] = [video, book] عمل دستكراشن وعكس القيم فقط 

console.log(book);
console.log(video);
قمت بعكس القيم فقط
 #118 - Destructuring Objects Part 1
تطبيق الدستراكشن على الاوبجيكت 
تعلمنا سابقا كيفيه طباعه الاوبجيكت 
const user ={
  theNamearafa,
  theAge34,
  theTittleDeveloper,
  theCountryegypt

};
console.log(user.theName);=arafa
console.log(user.theAge);=34
console.log(user.theTittle);=Developer
console.log(user.theCountry);=egypt

let theName=user.theName;
let theAge=user.theAge;
let theTittle=user.theTittle;
let theCountry=user.theCountry

console.log(theName);=arafa
console.log(theAge);=34
console.log(theTittle);=Developer
console.log(theCountry);=egypt

فى الديسكرابشن يتم تحديد الاوبجيكت كما يلى 
const user ={
  theNamearafa,
  theAge34,
  theTittleDeveloper,
  theCountryegypt
};
const{theName, theAge, theCountry, theTittle}=user;

console.log(theName);=arafa
console.log(theAge);=34
console.log(theTittle);=Developer
console.log(theCountry);=egypt

لو عاوز اتجاهل قيمه لا يتم كتابتها كما يلى 
const{theName, theAge,  theTittle}=user;
على العكس تمام من المصفوفات لا نترك مكانها فارغ 
#119 - Destructuring Objects Part 2
يمكن تغيير اسماء المتغيرات داخل الاوبجيكت كما يلى 
const user ={
  theNamearafa,
  theAge34,
  theTittleDeveloper,
  theCountryegypt
};
const{theNamen, theAgea,  theTittle}=user;عن طريق وضع كولون بجوار المتغير وكتابه الاسم الجديد

console.log(n);=arafa
console.log(a);=34
console.log(theTittle);=Developer

ويمكن عمل ديكلريشن لمتغير جديد داخل الاوبجيكت واعطائه قيمه كما يلى 
const user ={
  theNamearafa,
  theAge34,
  theTittleDeveloper,
  theCountryegypt
};
const{theNamen, theAgea,  theTittle, theColor=red }=user;

console.log(n);=arafa
console.log(a);=34
console.log(theTittle);=Developer
console.log(theColor);=red
خلى بالك عند تغيير الاسم تم وضع كولون وكتابه الاسم الجديد بعدها لكن عند تعريف متغير جديد تم كتابه اسم المتغير وعلامه يساوى وكتابه القيمه بين الدبلكوتيشن 
اذا تم اضافه القيمه داخل الاوبجيكت سوف يأخذ القيمه المكتوبه فى الاوبجيكت وليس القيمه الموجوده فى الديستراكشن 
-ولتغيير اسم يتم عمل نفس الطريقه 
const{theNamen, theAgea,  theTittle, theColor co =red }=user; تم تغييرها الى سى او 
طريقه عمل النيستد اوبجيكت بأستخدام الديستراكتشنج
const user ={
  theNamearafa,
  theAge34,
  theTittleDeveloper,
  theCountryegypt,
  skills{html70,تم عمل نيستد اوبجيكت  ويمكن تغيير اسمه كما سبق 
  css80
},
};
const{theNamen, theAgea,  theTittle, theColor co =red,skills{html,css} }=user;
تم اضافه المتغير الداخلى كله وتحديد العناصر المراد طباعتها او الوصول اليها باستخدم الديستراكشنج 
console.log(n);=arafa
console.log(a);=34
console.log(theTittle);=Developer
console.log(`my html progress is ${html}`);=red
console.log(`my css progress is ${css}`);=red

يمكن عمل الديستراكشنج للاوبجيكت الداخلى فقط كما يلى 
const {htmlskillone, cssskilltwo}=user.skills; تم تحديد الدستراكشن الخارجى اولا ثم اضافه الداخلى 

console.log(`my html progress is ${skillone}`);=red
console.log(`my css progress is ${skilltwo}`);=red

#120 - Destructuring Function Parameters
يكمن استخدام الفنكشن مع الاوبجيكت كما تعلمنا سابقا
كما يلى 
const user ={
  theNamearafa,
  theAge34,
   skills{
    html70,
    css80
   },
};
showDetails(user);فنكشن

function showDetails(obj){
  console.log(obj.theName)
  console.log(obj.theAge)
  console.log(obj.skills.css)
};
لعمل ذلك بأستخدام الدستراكشنج
يتم التعويض بالقيم كمايلى 
function showDetails({}=user){}
كما يلى 
function showDetails({theName,theAge,skills{css}}=user){
  console.log(theName)حذفنا الاوبج وعوضنا بالقيم من داخل الدستراكشنج مباشرة 
  console.log(theAge) حذفنا الاوبج وعوضنا بالقيم من داخل الدستراكشنج مباشرة
  console.log(css) حذفنا الاوبج وعوضنا بالقيم من داخل الدستراكشنج مباشرة
};

ويمكن تغيير اسم المتغير من داخل الدستراكشن واضافت متغيرات جديده كما يلى 
showDetails(user);

function showDetails({theNamen,theAgea,skills{cssv},z=5}=user){
  console.log(n)
  console.log(a)
  console.log(v)
  console.log(z)
};

#121 - Destructuring Mixed Content

تطبيق عملى على الدستراكشن مع الاوبجيكت 
const user ={
  theNamearafa,
  theAge34,
   skills[Html,css,javaScript],
   addresses{
    egyptcairo,
    ksaRiyadh
   },
};

 عمليه تعريف للمتغيرات فقط او دستراكتشر لكى يسهل  الوصول اليها وتغيير اسمها او قيمتها

const {theName n, theAge a, skills[one,two,there],addresses{egypte}}=user

console.log(`your name is ${n}`)
console.log(`your age is ${a}`)
console.log(`your skils is ${one},${two},${there}`)
console.log(`your address is ${e}`)

#122 - Destructuring Challenge
بفضل الله تم حل التحدى عن طرق وضع قيم المتغير والتعامل مع المصفوفات والاوبجيكت بداخلها مع ترك الاوبجيكت المستهدف فارغ حتى يتم تجاوزه وتطبيق الجمل الشرطيه 

 var chosen=3;

if(chosen ==1){

let myfrinds=[
  {titleosama, age39, availabletrue,  skills[Html,CSS]},
  {titleAhmed, age25, availablefalse, skills[python,Django]},
  {titleSayed, age33, availabletrue,  skills[PHp,Laravel]},
];
  const [{title,age,available,skills[two]}]=myfrinds;
  console.log(title)
  console.log(age)
  console.log(available)

  console.log(two)
};
if(chosen ==2){
  
let myfrinds=[
  {titleosama, age39, availabletrue,  skills[Html,CSS]},
  {titleAhmed, age25, availablefalse, skills[python,Django]},
  {titleSayed, age33, availabletrue,  skills[PHp,Laravel]},
];
  const [{},{title,age,available,skills[two]}]=myfrinds;
  console.log(title)
  console.log(age)
  console.log(available)
  
  console.log(two)
};
if(chosen ==3){
  
let myfrinds=[
  {titleosama, age39, availabletrue,  skills[Html,CSS]},
  {titleAhmed, age25, availablefalse, skills[python,Django]},
  {titleSayed, age33, availabletrue,  skills[PHp,Laravel]},
];
  const [{},{},{title,age,available,skills[two]}]=myfrinds;
  console.log(title)
  console.log(age)
  console.log(available)
 
  console.log(two)
};


#123 - Set Data Types And Method
السيت داتا تايب يقوم بتخزين البيانات  مثل المصفوفات لكن لايعرض البيانات المتساويه او يفلتر البيانات المكرره 
let mydata =[1,1,1,2,3];
let uniquedata= new Set([1,1,1,2,3])
console.log(mydata)=[1, 1, 1, 2, 3]
console.log(uniquedata)=Set(3) {1, 2, 3}
console.log(uniquedata.size)=3
يمكن اضافه اسم المتغير او المصفوفه بدلامن القيم 
let uniquedata= new Set(mydata) )=Set(3) {1, 2, 3}

ملحوظه هامه جدا لايمكن الدخول الى عناصر السيت بأستخدام الاندكس كما فى المصفوفات 
Add data setاضافه القيم او البيانات الى ال
-يمكن اضافه العناصر الى السيت بأستخدام الاد كما يلى 
let uniquedata= new Set().add(1).add(1).add(1).add(2).add(3)=Set(3) {1, 2, 3}
يمكن انشاء السيت داتا ثم اضافه المتغيرات اليها 
let uniquedata= new Set();
uniquedata.add(1).add(1).add(1)
uniquedata.add(2).add(3)

console.log(uniquedata)=Set(3) {1, 2, 3}

طريقه الحذف من الdata set 
let uniquedata= new Set();
uniquedata.add(1).add(1).add(1)
uniquedata.add(2).add(3)

uniquedata.delete(2)  تم تحديد رقم 2 لحذفه 
console.log(uniquedata)=Set(2) {1, 3}البينات بعد حذف رقم 2       
console.log(uniquedata.size)=2 لمعرفه حجم السيت 

delete تبحث هل العنصر موجود فى القيم ام لا تعطى صح او خطأ
let uniquedata= new Set();
uniquedata.add(1).add(1).add(1)
uniquedata.add(2).add(3)

uniquedata.delete(2)
console.log(uniquedata.delete(2))=false
النتيجه سالبه لان تم حذف رقم اثنين فى السطر السابق 
لكن اذا تم تهميش السطر تعطى ترو
let uniquedata= new Set();
uniquedata.add(1).add(1).add(1)
uniquedata.add(2).add(3)

 uniquedata.delete(2)
console.log(uniquedata.delete(2))=true
clear 
تقوم بحذف جميع القيم من السيت 
let uniquedata= new Set();
uniquedata.add(1).add(1).add(1)
uniquedata.add(2).add(3)

 uniquedata.delete(2)

uniquedata.clear()

console.log(uniquedata)=Set(0) {size 0}
console.log(uniquedata.size)=0

has
تقوم بالبحث عن العنصر داخل السيت 
console.log(uniquedata.has(A))=true
console.log(`is set has A  ${(uniquedata.has(A))}`)=is set has A  true


#124 - Set vs WeakSet And Garbage
Garbage
البيانات التى ليس لها قيم يتم عمل جاربيج لها او تهميشها 
المقارنه بينهم Set vs WeakSet

Set     = Can Store Any Data Values السيت يقبل اى بيانات 
  WeakSet = Collection Of Objects Only يقبل الاوبجيكت فقط 
  --
Set يقبل اى بينات ويتم فلترتها كالمعتاد 
let Myset= new Set([1,1,1,2,3,a,a]);
console.log(Myset)=Set(4) {1, 2, 3, 'a'}
WeakSetو

let myws =new WeakSet ([{a5,b8}])
console.log(myws)
تقبل الاوبجيكت فقط 
  Set     = Have Size Property له معادله للحجم
  WeakSet = Does Not Have Size Property ليس له معادله للحجم 
console.log(`size  of element in myset is ${Myset.size}`)=size  of element in myset is 4

  Set     = Have Keys, Values, Entries  له ايتريتور 
  WeakSet = Does Not Have clear, Keys, Values And Entries مالوش ايتريتور
  --
Set له خواص الايتريتور او التكرار والكى تساوى الفاليو فى التسميه 
let iterator = Myset.keys()
 let iterator = Myset.values()
console.log(iterator)=SetIterator {1, 2, 3, 'a'}
console.log(iterator.next())={value 1, done false}

Set السيت يمكن تطبيق الفورايتش عليها بعكس الويكسيت
Set     = Can Use forEach
  WeakSet = Cannot Use forEach

Myset.forEach((el)= console.log(el))=1 ,2 ,3 A


#125 - Map Data Type Vs Objecs
مقارنه الماب والاوبجيكت 
------ Map = Does Not Contain Key By Default
  ------ Object = Has Default Keys
  --
let myObject ={};
let myEmbtyobjest = Object.create(null);
let mymap =new Map();

console.log(myObject)
console.log(myEmbtyobjest);=No properties
console.log(mymap)=No properties
الماب لايوجد بها خصائص  عكس الاوبجيكت يوجد بها كما يلى 
  ------ Map = Key Can Be Anything [Function, Object, Any Primitive Data Types] الماب يمكن اضافه اى نوع من البيانات 
  ------ Object = String Or Symbol الاوبجيكت يقبل فقط النصوص والسيمبلى 

let myNewMap =new Map()
myNewMap.set(10,number)
myNewMap.set(10,string)
myNewMap.set(true, Boolean);
myNewMap.set({a 1, b 2}, Object);
myNewMap.set(function doSomething() {}, Function);

console.log(myNewMap.get(10))=number
console.log(myNewMap.get(10))=string
console.log(#########)
console.log(myNewOpject)
console.log(myNewMap)
------ Map = Ordered By Insertion الماب تظهر البينات بنفس ترتيب الادخال 
  ------ Object = Not 100% Till Now يظهر البينات لكن ليس بنفس الطريقه ميه فى الميه 

  ------ Map = Get Items By Size الماب يمكن معرفه عدد العناصر بالسايز 
  ------ Object = Need To Do Manually  يوجد طريقه منول لمعرفه عدد العناصر فى الاوبجيكت 

------ Map = Can Be Directly Iterated يمكن عمل اللوب مباشره  عكس الاوبجيكت
  ------ Object = Not Directly And Need To Use Object.keys() And So On
الماب اسرع من الاوبجيكت فى تنفيذ الاوامر
#126 - Map Methods
العمليات على الماب
let myNewMap =new Map() انشاء الماب فارغه 

myNewMap.set(10,number) اضافه العناصر  الى الماب عن طريق كتابه الاسم والقيمه  
myNewMap.set(name,string) اضافه العناصر  الى الماب عن طريق كتابه الاسم والقيمه  

console.log(myNewMap)
استدعاء العنصر من الماب  بأستخدام الجيت 
console.log(myNewMap.get(10))تحديد نوع البينات عن طريق كتابه الاسم فقط   number    
console.log(myNewMap.get(name)) string

انشاء الماب وبها العناصر عن طريق كتابتهم داخل الاقواس كما يلى
let myNewMap =new Map([
    [10,number],
    [name,string]
])

let myNewMap =new Map([
    [10,number],
    [name,string],
    [false,boolean]
])
console.log(myNewMap.get(false))=boolean
مالوش علاقه بالترو او الفولس لكن بيشوف اسم العنصر ويطبع القيمه
الحجم او السيز 
console.log(myNewMap.size)=3
الحذف من الماب 
بأستخدام الديليت كما يلى 
console.log(myNewMap.delete(name))=true

console.log(myNewMap.size)=2
النتيجه هتكون ترو فى حاله ان العنصر موجود وتم حذفه وفالس لو مش موجود وطبعا بعد الحذف السيز هيكون اتنين بدل 3 
Clear الكلير 
myNewMap.clear()
console.log(myNewMap.size)=0
الكلير بيقوم بحذف جميع العناصر من الماب 

Has البحث او التأكيد 
let myNewMap =new Map([
    [10,number],
    [name,string],
    [false,boolean]
])
console.log(myNewMap.has(false))=true

بأستخدام الهاز يمكن العثور على العنصر داخل الماب 


#127 - Map Vs WeakMap
   Weak

 هى كلمه تدل او  تسمح للجارباج بتأديه وظيفته والسماح له بحذف البيانات التى ليس لها ريفرانس
Map     = Key Can Be Anything
  WeakMap = Key Can Be Object Only
  --
الماب تسمح بادخال اى بيانات 
الويك ماب فقط الاوبجيكت 
let mapUser = { theName Elzero };

let myMap = new Map();

myMap.set(mapUser, Object Value);

mapUser = null;  Override The Reference

console.log(myMap);

console.log(#.repeat(20));

let wMapUser = { theName Elzero };

let myWeakMap = new WeakMap();

myWeakMap.set(wMapUser, Object Value);

wMapUser = null;  Override The Reference

console.log(myWeakMap);
#128 - Array.from Method
العمليات المتقدمه للمصفوفات 
Array.from(Iterable, MapFunc, This)
console.log(Array.from(arafa))=(5) ['a', 'r', 'a', 'f', 'a']
تقوم بتقسيم العنصر الى اجزاء -1
2-ممكن اضافه الفنكشن مع الفورم لتنفيذ عمليه على المصفوفه كمايلى 
console.log(Array.from(12345, function(n){
    return n + n;
}))=['11', '22', '33', '44', '55']
فنكشن جمع رقمين ولكن بسبب عدم التحويل الى ارقام تم التعامل معها على انها نص وللتحويل الى ارقم نستخدم  اى عمليه تحويل النص الى رقم كما تعلمنا فى السابق 
console.log(Array.from(12345, function(n){
    return +n + +n;
}))=(5) [2, 4, 6, 8, 10]
ويمكن تحويلها الى اروفنكشن كما تعلمنا فى السابق 
console.log(Array.from(12345, (n) = +n + +n))=(5) [2, 4, 6, 8, 10]
مثال حذف العناصر المكرره من المصفوفه 
let array =[1,1,1,1,2,3,4,5]

let myset=new Set(array)
console.log(myset)=Set(5) {1, 2, 3, 4, 5}
argument
تقوم بعمل مصفوفه للعناصر الداخله بها كما يلى 
function testargs(){
    return arguments
};
console.log(testargs(arafa,omar,dega))
=['arafa', 'omar', 'dega', callee ƒ, Symbol(Symbol.iterator) ƒ]

#129 - Array.copyWithin Method
الكوبى ويزان تقوم بعمل كوبى للعناصر داخل المصفوفات 
اذا لم يتم كتابه البدايه والنهايه تقوم بالبدء من اندكس صفر 
اذا تم كتابه رقم اندكس اكبر من عدد العناصر لاتنسخ شىء
let array =[10,20,30,40,50, A,B]

array.copyWithin(3)
= [10, 20, 30, 10, 20, 30, 40]

console.log(array)

تحديد التارجيت والعنصر المراد نسخه 
let array =[10,20,30,40,50, A,B]

array.copyWithin(4,6) رقم اربعه ده رقم اندكس المستهدف الطباعه فيه ورقم 6 د العنصر المستهددف نسخه 
= (7) [10, 20, 30, 40, 'B', 'A', 'B']
array.copyWithin(4,-1)يمكن استهداف اخر عنصر بأستخدام العد العكسى  عن طريق كتابه سالب واحد

console.log(array)

تحديد البدايه والنهايه بالسالب 
let array =[10,20,30,40,50, A,B]

array.copyWithin(1,-2)لم يتم كتابه النهايه  لكى يطبع الى اخر الارى

= (7) [10, 'A', 'B', 40, 50, 'A', 'B']
console.log(array)

#130 - Array.some Method
السوم تقوم بتطبيق فنكشن على كل عنصر بشرط معين فى حاله تطبيق الشرط فى اى عنصر من العناصر  تعطى ترو يعنى لو ببحث عن اسم او رقم معين ووجده فى المصفوفه هيعطى ترو 
تقبل منك الكولباك فنكشن والزيس الخاصه بها 
وتقبل الاليمنت والاندكس والاراى 

  Array Methods
  - Array.some(CallbackFunc(Element, Index, Array), This Argument)
  --- CallbackFunc = Function To Run On Every Element On The Given Array
  ------ Element = The Current Element To Process
  ------ Index = Index Of Current Element
  ------ Array = The Current Array Working With
  --- This Argument = Value To Use As This When Executing CallbackFunc
  --
  Using
  - Check if Element Exists In Array
  - Check If Number In Range

مثال  
let nums =[1,2,3,4,5,6,7,8,9,10]; مصفوفه 

let check=nums.some(function(e){ الفنكشن مع السوم والشرط الخاص بها 
    console.log(t)
        return e5;
});
console.log(check)=true 
عمل ارو فنكشن 
let check=nums.some((e)= e5);
يمكن وضع الارجيومينت واستخدام الزيس كما يلى 
let nums =[1,2,3,4,5,6,7,8,9,10];

let mynumper =5; تم وضع المتغير 

let check=nums.some(function(e){
  
    return ethis;
},mynumper);وتم التوعيض بقيمة المتغير داخل الارجيومنت 

console.log(check)
مثال متقدم لعمل فنكشن تقبل اراى معينه وتبحث عن قيمه داخلها 
let nums =[1,2,3,4,5,6,7,8,9,10]; مصفوفه
function checkvalues (arr,val){    تم عمل فنكشن  تقبل المصفوفه والقيمه 
    return arr.some(function(e){تم التعويض بالمصفوفه ومعها السوم  وعمل مصفوفه داخليه وكتابه القيمه بها وقيمة العنصر المراد البحث عنه 
        return e===val;
    })
};

console.log(checkvalues(nums,5))=true ر قم  خمسه  موجود بالفنكشن 
console.log(checkvalues(nums,20))=false ورقم عشرين  مش موجود بالفنكشن 
مثال متقدم لعمل اوبجيكت به قيمتين والبحث عن رينج معين داخله 
let nums =[1,2,3,4,5,6,7,8,9];

let rang={
    min10,
    max20,
};

let checknumperinragne =nums.some(function(e){
return e = this.min && e = this.max
},rang)=الزيس انا حطيت قيمته لما استخدمت الرانج هنا 
console.log(checknumperinragne)
#131 - Array.every Method
الايفرى تقوم بتطبيق الشرط على جميع العناصر ولازم ينطبق الشرط على جميع العناصر 
وتقبل نفس المدخلات 

  Array Methods
  - Array.every(CallbackFunc(Element, Index, Array), This Argument)
  --- CallbackFunc = Function To Run On Every Element On The Given Array
  ------ Element = The Current Element To Process
  ------ Index = Index Of Current Element
  ------ Array = The Current Array Working With
  --- This Argument = Value To Use As This When Executing CallbackFunc
المثال اولا تم تحويل عناصر الاوبجيكت الى اراى بأستخدام الاوبجيكت كى 
ثانيا تم تحويل العناصر من نص الى ارقام بأستخدام البلص
ثالثا تم عمل التشيك بأستخدام ايفرى ووضع الفنكشن الخاص بها وعمل الارجيومنت واستخدام الزيس كما يلى 
const locations={
    20place 1,
    30place 2,
    15place 3,
    40place 4,
};

let mainlocation =15;

let locationsarray= Object.keys(locations)هيقوم بتحويل عناصر الاوبجيكت الى مصفوفه
console.log(locationsarray) ['15', '20', '30', '40']

let locationArrayNumbers =locationsarray.map((n)= +n)=تحويل النص الى ارقام بأستخدام البلص
console.log(locationArrayNumbers)=[15, 20, 30, 40]

let check = locationArrayNumbers.every(function(e){
    return e this
},mainlocation)

console.log(check)=false

#132 - Spread Syntax And Use Cases
الاسبريد تعنى انتشار 
يستخدم لفصل العناصر
عند التعامل مع النصوص
تم عمل التجزئه للعناصر
ولوعاوزتعمل مصفوفه  يتم وضعهم داخل اقواس المصفوفه كالاتى
=Spread with string= Expand string

console.log(Osama)=Osama
console.log(...Osama)=O s a m a
console.log([...Osama])= ['O', 's', 'a', 'm', 'a']

يمكن جمع عناصر المصفوفات بأستخدام الاسبريد كما يلى 
Concatinate Arrays
let ar1= [1,2,3]
let ar2= [4,5,6]
let allar=[...ar1,...ar2]
console.log(allar)=(6) [1, 2, 3, 4, 5, 6]
عمل كوبى او نسخه من مصفوفه بأستخدام الاسبريد
= Copy Arrays
let ar1= [1,2,3]
let copeyar1=[...ar1]وهنا هيكتب جميع القيم فى المصفوفه الجديده مع الاحتفاظ بالقديمه 

console.log(copeyar1)= [1, 2, 3]
اضافه عناصر جديده الى المصفوفه بأستخدام البوش
 Push Inside Array

let allFriends = [Osama, Ahmed, Sayed];
let thisYearFriends = [Sameh, Mahmoud];

allFriends.push(...thisYearFriends);

console.log(allFriends);
استخدام الماس اوبجيكت كما يلى 

 Use With Math Object

let myNums = [10, 20, -100, 100, 1000, 500];
console.log(Math.max(...myNums));
تم تجزئه العناصر داخل المصفوفه لكى يتم قبول العمليه 
يمكن دمج الاوبجيكت معا بأستخدام الاسبريد
كما يلى وممكن ايضا اضافه عناصر جديده الى الاوبجيكت
 Spread With Objects = Merge Objects

let objOne = {
  a 1,
  b 2,
};
let objTwo = {
  c 3,
  d 4,
};

console.log({ ...objOne, ...objTwo, e 5 });={a 1, b 2, c 3, d 4, e 5}

#133 - Map And Set Challenge
تم حل التحدى عن طريق اختيار اكبر عنصر وهو رقم 30 ثم ضربه فى طول المصفوفتين 7 ارقام ينتج 210

let n1 =[10, 30, 10, 20];
let n2 =[30, 20, 10];
solution=Math.max(...n1)([...n1,...n2]).length
console.log(solution)=210

#134 - Intro And What Is Regular
التصميم البسيط 
يقوم بعمل الجمله الشرطيه مع النصوص لكن بستخدام فرضيه معينه
ويتم التحقق به من النصوص كما يلى 

  Regular Expression
  - Email
  - IP
  - Phone
  - URL


let str1 = '10 20 100 1000 5000';
let str2 = 'Os1 Os12 Os123 Os123Os Os12312Os123';

let invalidEmail = 'Osama@@@gmail....com';
let validEmail = 'o@nn.sa';

let ip = '192.168.2.1';  IPv4

let url = 'elzero.org';
let url = 'elzero.org';
let url = 'httpelzero.org';
let url = 'httpwww.elzero.org';
let url = 'https.elzero.org';
let url = 'httpswww.elzero.org';
let url = 'httpswww.elzero.orgfacebookid=asdasdasd';

#135 - Regular Expressions – ModifierS
يتم انشاء باترن او نموذج للبحث عنه داخل الاسترينج كما يلى 
let mystring =Hello Elzero Web School I love elzero;
let regex =Elzero;
console.log(mystring.match(regex));
['Elzero', index 6, input 'Hello Elzero Web School I love elzero', groups undefined]

   Modifiers = Flags
  i = case-insensitive
  g = global
  m = Multilines

حاله الاحرف 
case insensitive
غير مهمه فتظهر النتيجه بحروف كبيره وصغيره
let regex =Elzeroi;
global
الجلوبال يقوم بالبحث عن جميع النتائج المطابقه عن طريق اضافه حرف ج كما يلى 
let regex =Elzeroig;(2) ['Elzero', 'elzero']
لو القيمه المدخله غير موجوده يقوم بأرجاع نل 
let regex =Elzehroig;null
فى حاله وجود مجموعه من السطور يتم ادخال m 
يمكن انشاء الريجيولر بأستخدام 
Syntax
  patternmodifier(s);
  new RegExp(pattern معناها نموذج بالعربى , modifier(s) معناها متغيرات او تعريفات )

#136 - Regular Expressions - Ranges Part1
تم اختيار اكثر من متغير للبحث عنه عن طريق كتابتهم بين قوسين ووضع علامه او بينهم 

- Part 1
  (XY) = X Or Y
let tld =Com Net Org Info Code Io;
let tldRe=(infoorgio)i;
console.log(tld.match(tldRe));
(2) ['Org', 'Org', index 8, input 'Com Net Org Info Code Io', groups undefined]
تم اختيار اكثر من متغير للبحث عنه عن طريق كتابتهم بين قوسين ووضع علامه او بينهم
الرنج فى الارقام يتم كتابته كما يلى 
[0-9] = 0 To 9
تم كتابه الارقام داخل الريجيولر وظهرت النتيجه بناءا على رقم واحد اول رقم موجود فى الرنج 
let nums=12345678910
let numsRe=[0-9];
console.log(nums.match(numsRe))
['1', index 0, input '12345678910', groups undefined]
اذا تم عمل الجلوبال تكون النتيجه جميع الارقام مفرقه كما يلى 
let nums=12345678910
let numsRe=[0-9]g;
console.log(nums.match(numsRe))
(11) ['1', '2', '3', '4', '5', '6', '7', '8', '9', '1', '0']
بسبب ان جميع الارقام تم المرور عليها 
فى حاله البحث عن العنصر داخل الرنج نكتب الرنج فقط 
اما فى حاله البحث عن العناصر ماعدا الرنج نضع علامه النوت قبل الرنج كما يلى 
let nums=12345678910
let numsRe=[0-2]g;
console.log(nums.match(numsRe))
 ['1', '2', '1', '0']
let Notnums=12345678910
let NotnumsRe=[^0-2]g;دى علامه النوت او اظهار اى عنصر غير دول   ^       
console.log(Notnums.match(NotnumsRe))
  ['3', '4', '5', '6', '7', '8', '9']
لاظهار العلامات بدون الارقام نتع الاتى 
let Notnums=1!2@3#4$5%678910
let NotnumsRe=[^0-9]g;
console.log(Notnums.match(NotnumsRe))
   ['!', '@', '#', '$', '%']
مع العلم جميع الارقام فى العالم تتكون من 0-9 فقط والباقى تكرار لها 
كيفيه البحث عن ارقام وحروف معا 
let practices=os1 oss os3 os8 os8os
let practicesRe=os[5-9]osg;
console.log(practices.match(practicesRe))
   ['os8os']

تم عمل النموذج بأستخدام الحروف المستهدفه ووضع رنج الارقام فى قوسى مصفوفه بينهم 
وبالتالى عند انطباق اى بترن على هذا النموذج فى رنج الارقام يتم اظهارة 
#137 - Regular Expressions - Ranges Part2
كيفيه اظهار الاحرف من a to z كابيتال وسمول 
let mystrig =AaBbcdefG123!234%^&;

let atozSmall =[a-z]g;تم وضع الجلوبال لأظهار جميع الاحرف  وكتبتهمم اسمول لو كتبتهم كابيتال هيظهر الكابيتال 
console.log(mystrig.match(atozSmall))
=['a', 'b', 'c', 'd', 'e', 'f']
وممكن  اجيب عكسها بأستخدام النوت ^

let mystrig =AaBbcdefG123!234%^&;

let atozSmall =[^A-Z]g;
console.log(mystrig.match(atozSmall))
=(17) ['a', 'b', 'c', 'd', 'e', 'f', '1', '2', '3', '!', '2', '3', '4', '%', '^', '&', '']
ممكن اختار حروف معينه فقط هيا الى تظهر كما يلى 
let mystrig =AaBbacadaefG123!234%^&;

let atozSmall =[a,c]g;تم وضع الفصله بدلامن الاندراسكور
console.log(mystrig.match(atozSmall))
=['a', 'a', 'c', 'a', 'a']
لاظهار جميع الحروف الكابيتال والاسمول 
let mystrig =AaBbacadaefG123!234%^&;

let atozSmall =[A-Za-z]g;
console.log(mystrig.match(atozSmall))
=(12) ['A', 'a', 'B', 'b', 'a', 'c', 'a', 'd', 'a', 'e', 'f', 'G']
طبعا لو عملت نوت قبل الحروف هيظهركل الارقام والعلامات بدون احرف 
ولو ضفت الارقم مع الحروف الكابيتال مع النوت  والاسمول هيظهر العلامات كما يلى 
let mystrig =AaBbacadaefG123!234%^&;

let atozSmall =[^A-Za-z0-9]g;تم اظهار العلامات فقط علشان انا كتب له انا مش عاوز الارقام اسمول وكابيتا ل ولا ارقام 
console.log(mystrig.match(atozSmall))
=['!', '%', '^', '&', '']
#138 - Regular Expressions - Character Classes Part 1
  Regular Expression
  Character Classes
  . = matches any character, except newline or other line terminators.تظهر جميع العناصر حتى المسافات 
  w = matches word characters. [a-z, A-Z, 0-9 And Underscore]
  W = matches Non word characters
  d = matches digits from 0 to 9.هيظهر الارقام فقط من صفر الى تسعه 
  D = matches non-digit characters.
  s = matches whitespace character.
  S = matches non whitespace character.

الدوت . تظهر جميع العناصر حتى المسافات
let email =o@@@g...com o@g.com o@g.net A@Y.com o-g.com o@s.org 1@1.com;

let dot =.g;
console.log(email.match(dot))
=(59) ['o', '@', '@', '@', 'g', '.', '.', '.', 'c', 'o', 'm',
 ' ', 'o', '@', 'g', '.', 'c', 'o', 'm', ' ', 'o', '@', 'g', '.', 'n', 'e', 't', ' ', 'A', '@', 'Y', '.', 'c', 'o', 'm', ' ', 'o', '-', 'g', '.', 'c', 'o', 'm', ' ', 'o', '@', 's', 
 'o', 'r', 'g', ' ', '1', '@', '1', '.', 'c', 'o', 'm']
wيقوم بمطابقه الاحرف والارقام والاندراسكور  اسمول
فى وكابيتال بيقوم بعكس النتيجه تمام حيث انه ظهر الاسبيشيال كاركتيرز والمسافات والدوت 
let email =o@@@g...com33 o@g.com o@g.net A@Y.com o-g.com o@s.org 1@1.com;

let dot =wg;
console.log(email.match(dot))
=(35) ['o', 'g', 'c', 'o', 'm', '3', '3', 'o', 'g', 'c', 'o', 'm', 'o', 'g', 'n', 'e', 't', 'A', 'Y', 'c', 'o', 'm', 'o', 'g', 'c', 'o', 'm', 'o', 's',
 'o', 'r', 'g', '1', '1', 'c', 'o', 'm']

الكابيتال يظهر الادوت والعلامات والمسافات 
let email =o@@@g...com33 o@g.com o@g.net A@Y.com o-g.com o@s.org 1@1.com;

let dot =Wg;
console.log(email.match(dot))
=(24) ['@', '@', '@', '.', '.', '.', ' ', '@', '.', ' 
', '@', '.', ' ', '@', '.', ' ', '-', '.', ' ', '@', '.', ' ', '@', '.']


تعنى اى رقم d
let email =o@@@g...com33 o@g.com o@g.net A@Y.com o-g.com o@s.org 1@1.com;

let dot =dg;
console.log(email.match(dot))
 ['3', '3', '1', '1'] هظهير الارقام فقط من صفر الى تسعه 
D
هيظهر جميع العناصر ماعدا الارقام 
s
هيظهر المسافات فقط 
let email =o@@@g...com33 o@g.com o@g.net A@Y.com o-g.com o@s.org 1@1.com;

let dot =sg;
console.log(email.match(dot))
  [' ', ' ', ' ', ' ', ' ', ' ']
S
الكابيتال هيظهرجميع العناصر ما عادا المسافات 
طريقه الجمع بين الكراكتير كلاس لتكوين اميل فاليد سمبل 
let email =o@@@g...com33 o@g.com o@g.net A@Y.com o-g.com o@s.org 1@1.com;

let valid =w@w(.com.net)g;
console.log(email.match(valid))
  ['o@g.com', 'o@g.net', 'A@Y.com', '1@1.com']
تم اظهار العناصر المطلوبه عن طريق الوردثم علامه الات ثم الورد ثم استخدام المالتى ريجويلر لاختيار كوم ونت 
مع العلم الدبيلوب بتطابق الارقام او الحروف والاندراسكور كما تعلمنا
#139 - Regular Expressions - Character Classes Part 2
b,B
let names =Sayed 1Spam 2spam 3spam Spam4 Spam5 Osama Ahmed Aspamo 
let re=spamig;
console.log(names.match(re))
= ['Spam', 'spam', 'spam', 'Spam', 'Spam', 'spam']
عند عمل الباترن تم اظهار جميع الكلمات التى تحتوى على اسبام لكن فى حاله استخدام بالكسلاش بى اسمولb
يقوم بأظهار العناصر التى تبدء بكلمه اسبام وفى الكابيتال بى هيظهر العناصر التى تنتهى بكلمه اسبام فقط كما يلى 
B
let names =Sayed 1Spam 2spam 3spam Spam4 Spam5 Osama Ahmed Aspamo 
let re=Bspamig;
console.log(names.match(re))
= ['Spam', 'spam', 'spam', 'spam']
 b
let names =Sayed 1Spam 2spam 3spam Spam4 Spam5 Osama Ahmed Aspamo 
let re=bspamig;
console.log(names.match(re))
=  ['Spam', 'Spam']
يمكن اختيار الكلمه فى الاول او الاخر بأستخدام 
let names =Sayed 1Spam 2spam 3spam Spam4 Spam5 Osama Ahmed Aspamo 
let re=(bspamspamb)ig;
console.log(names.match(re))
=  ['Spam', 'spam', 'spam', 'Spam', 'Spam']
Test method
يمكن عمل اختبار هل البترن او النموذج موجود ام لا كما يلى 
ويمكن التعويض بالمتغير او قيمته 
console.log(re.test(names))=true
console.log((bspamspamb)ig.test(names))=true
 يمكن البحث اعن اى اسم 
console.log(re.test(names))=true
console.log((bspamspamb)ig.test(osama))=false اسامه موجود لكن لاينطبق عليه الشرط 
console.log((bspamspamb)ig.test(1spam))=true اسبام موجود لانه بينتهى بالكلمه 
console.log((bspamspamb)ig.test(spam1))=true وهنا موجود لانه بيبدء بالكلمه 
#140 - Regular Expressions - Quantifiers Part 1

 Quantifiers
  n+    = One Or More
  n    = zero or more
  n    = zero or one
محددات القيم 
تعلمنا فى السابق اختصارات الحرف او الكراكتر كلاس وفى هذا الدرس نتعلم كيفيه اضافه عدد معين من الاحرف او الارقام عن طريق هذه العلامات +  ؟
اولا علامه الزائد
هذه العلامه عند اضافتهابجوار الحرف تدل على وجود اكثر من احرف بهذا الموقع كما يلى 
let mails = o@nn.sa osama@gmail.com elzero@gmail.net osama@mail.ru;
let mailsre=w+@w+.(comnet)ig;
console.log(mails.match(mailsre))
=['osama@gmail.com', 'elzero@gmail.net']
لاحظ وجود علامه الزائد بجانب الحرف الدال على استخدام الاحرف فقام بطباعه الاحرف جميعا قبل علامه الات وبعدها بدلا من حرف واحد كما فى المثال التالى 
let mails = o@nn.sa osama@gmail.com elzero@gmail.net osama@mail.ru;
let mailsre=w@ww.saig;
console.log(mails.match(mailsre))
=['o@nn.sa']
هنا تم اظهار الناتج الذى يحتوى فقط على حرف واحد قبل وحرفين بعد الات
وممكن اظهار جميع التوبورد كركتر
او نهايات الموقع مثل دوت كوم وارج الخ.
let mails = o@nn.sa osama@gmail.com elzero@gmail.net osama@mail.ru;
let mailsre=w+@w+.w+ig;
console.log(mails.match(mailsre))
=(4) ['o@nn.sa', 'osama@gmail.com', 'elzero@gmail.net', 'osama@mail.ru']


الارقام 
let nums =0110 10 150 05120 0560 350 00
let numsre=0d+0ig;
console.log(nums.match(numsre))
=['0110', '05120', '0560']
 تم اظهار الارقام التى تبدء بصفر وتنتهى بصفر وفى الوسط بها عدد من الارقام 
عند اضافه علامه الضرب بدل الجمع  هذا يعنى اى رقم بدايته صفر ونهايته صفر وممكن يوجد بداخله ارقام اخرى او لا
let nums =0110 10 150 05120 0560 350 00
let numsre=0d0ig;
console.log(nums.match(numsre))
=['0110', '05120', '0560', '00']
تم اظهار اخرصفرين لعدم وجود اى ارقام بينهم
 علامه الاستفهام تعنى وجودالحرف اوعدمه
let urls = httpsgoogle.com httpwww.website.net web.com;
let urlsre=httpsig;
console.log(urls.match(urlsre))
 ['https', 'http']
هنا اضفنا النقطتين وعلامتين بعدها عن طريق عمل اسكيبنج كما يلى 
let urls = httpsgoogle.com httpwww.website.net web.com;
let urlsre=httpsig;فى هذه الخطوه تم اضافه بعد  لكى يتم فهمها برمجيا 
console.log(urls.match(urlsre))
 ['https', 'http']
عمل باترن لاسم الموقع كاملا 
let urls = httpsgoogle.com httpwww.website.net web.com;
let urlsre=https(www.)w+.wig;
console.log(urls.match(urlsre))
 ['httpsgoogle.c', 'httpwww.website.n']
ويمكن عمل اول جروب كمجموعه كما يلى 
let urls = httpsgoogle.com httpwww.website.net web.com;
let urlsre=(https)(www.)w+.w+ig;
console.log(urls.match(urlsre))
 (3) ['httpsgoogle.com', 'httpwww.website.net', 'web.com']




